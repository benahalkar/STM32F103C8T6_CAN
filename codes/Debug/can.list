
can.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003114  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003220  08003220  00013220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003260  08003260  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003260  08003260  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003260  08003260  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003260  08003260  00013260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003264  08003264  00013264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003268  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000010  08003278  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08003278  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b0a4  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b5f  00000000  00000000  0002b0dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bb8  00000000  00000000  0002cc40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ad0  00000000  00000000  0002d7f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014247  00000000  00000000  0002e2c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008673  00000000  00000000  0004250f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072e22  00000000  00000000  0004ab82  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bd9a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000304c  00000000  00000000  000bda20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08003208 	.word	0x08003208

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08003208 	.word	0x08003208

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f001 f961 	bl	8001424 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f002 ff36 	bl	8002fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 fe42 	bl	8002df0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000178:	b480      	push	{r7}
 800017a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800017c:	4b05      	ldr	r3, [pc, #20]	; (8000194 <HAL_IncTick+0x1c>)
 800017e:	781b      	ldrb	r3, [r3, #0]
 8000180:	461a      	mov	r2, r3
 8000182:	4b05      	ldr	r3, [pc, #20]	; (8000198 <HAL_IncTick+0x20>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	4413      	add	r3, r2
 8000188:	4a03      	ldr	r2, [pc, #12]	; (8000198 <HAL_IncTick+0x20>)
 800018a:	6013      	str	r3, [r2, #0]
}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	20000004 	.word	0x20000004
 8000198:	2000002c 	.word	0x2000002c

0800019c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800019c:	b480      	push	{r7}
 800019e:	af00      	add	r7, sp, #0
  return uwTick;
 80001a0:	4b02      	ldr	r3, [pc, #8]	; (80001ac <HAL_GetTick+0x10>)
 80001a2:	681b      	ldr	r3, [r3, #0]
}
 80001a4:	4618      	mov	r0, r3
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	2000002c 	.word	0x2000002c

080001b0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b086      	sub	sp, #24
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80001b8:	2300      	movs	r3, #0
 80001ba:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80001bc:	2300      	movs	r3, #0
 80001be:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80001c0:	2300      	movs	r3, #0
 80001c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80001c4:	2300      	movs	r3, #0
 80001c6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d101      	bne.n	80001d2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80001ce:	2301      	movs	r3, #1
 80001d0:	e0be      	b.n	8000350 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	689b      	ldr	r3, [r3, #8]
 80001d6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d109      	bne.n	80001f4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	2200      	movs	r2, #0
 80001e4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	2200      	movs	r2, #0
 80001ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80001ee:	6878      	ldr	r0, [r7, #4]
 80001f0:	f002 fe30 	bl	8002e54 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80001f4:	6878      	ldr	r0, [r7, #4]
 80001f6:	f000 fbdd 	bl	80009b4 <ADC_ConversionStop_Disable>
 80001fa:	4603      	mov	r3, r0
 80001fc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000202:	f003 0310 	and.w	r3, r3, #16
 8000206:	2b00      	cmp	r3, #0
 8000208:	f040 8099 	bne.w	800033e <HAL_ADC_Init+0x18e>
 800020c:	7dfb      	ldrb	r3, [r7, #23]
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8095 	bne.w	800033e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000218:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800021c:	f023 0302 	bic.w	r3, r3, #2
 8000220:	f043 0202 	orr.w	r2, r3, #2
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000230:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	7b1b      	ldrb	r3, [r3, #12]
 8000236:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000238:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800023a:	68ba      	ldr	r2, [r7, #8]
 800023c:	4313      	orrs	r3, r2
 800023e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	689b      	ldr	r3, [r3, #8]
 8000244:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000248:	d003      	beq.n	8000252 <HAL_ADC_Init+0xa2>
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	689b      	ldr	r3, [r3, #8]
 800024e:	2b01      	cmp	r3, #1
 8000250:	d102      	bne.n	8000258 <HAL_ADC_Init+0xa8>
 8000252:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000256:	e000      	b.n	800025a <HAL_ADC_Init+0xaa>
 8000258:	2300      	movs	r3, #0
 800025a:	693a      	ldr	r2, [r7, #16]
 800025c:	4313      	orrs	r3, r2
 800025e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	7d1b      	ldrb	r3, [r3, #20]
 8000264:	2b01      	cmp	r3, #1
 8000266:	d119      	bne.n	800029c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	7b1b      	ldrb	r3, [r3, #12]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d109      	bne.n	8000284 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	3b01      	subs	r3, #1
 8000276:	035a      	lsls	r2, r3, #13
 8000278:	693b      	ldr	r3, [r7, #16]
 800027a:	4313      	orrs	r3, r2
 800027c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000280:	613b      	str	r3, [r7, #16]
 8000282:	e00b      	b.n	800029c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000288:	f043 0220 	orr.w	r2, r3, #32
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000294:	f043 0201 	orr.w	r2, r3, #1
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	685b      	ldr	r3, [r3, #4]
 80002a2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	693a      	ldr	r2, [r7, #16]
 80002ac:	430a      	orrs	r2, r1
 80002ae:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	689a      	ldr	r2, [r3, #8]
 80002b6:	4b28      	ldr	r3, [pc, #160]	; (8000358 <HAL_ADC_Init+0x1a8>)
 80002b8:	4013      	ands	r3, r2
 80002ba:	687a      	ldr	r2, [r7, #4]
 80002bc:	6812      	ldr	r2, [r2, #0]
 80002be:	68b9      	ldr	r1, [r7, #8]
 80002c0:	430b      	orrs	r3, r1
 80002c2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	689b      	ldr	r3, [r3, #8]
 80002c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002cc:	d003      	beq.n	80002d6 <HAL_ADC_Init+0x126>
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	689b      	ldr	r3, [r3, #8]
 80002d2:	2b01      	cmp	r3, #1
 80002d4:	d104      	bne.n	80002e0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	691b      	ldr	r3, [r3, #16]
 80002da:	3b01      	subs	r3, #1
 80002dc:	051b      	lsls	r3, r3, #20
 80002de:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002e6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	68fa      	ldr	r2, [r7, #12]
 80002f0:	430a      	orrs	r2, r1
 80002f2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	689a      	ldr	r2, [r3, #8]
 80002fa:	4b18      	ldr	r3, [pc, #96]	; (800035c <HAL_ADC_Init+0x1ac>)
 80002fc:	4013      	ands	r3, r2
 80002fe:	68ba      	ldr	r2, [r7, #8]
 8000300:	429a      	cmp	r2, r3
 8000302:	d10b      	bne.n	800031c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	2200      	movs	r2, #0
 8000308:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800030e:	f023 0303 	bic.w	r3, r3, #3
 8000312:	f043 0201 	orr.w	r2, r3, #1
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800031a:	e018      	b.n	800034e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000320:	f023 0312 	bic.w	r3, r3, #18
 8000324:	f043 0210 	orr.w	r2, r3, #16
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000330:	f043 0201 	orr.w	r2, r3, #1
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000338:	2301      	movs	r3, #1
 800033a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800033c:	e007      	b.n	800034e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000342:	f043 0210 	orr.w	r2, r3, #16
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800034a:	2301      	movs	r3, #1
 800034c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800034e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000350:	4618      	mov	r0, r3
 8000352:	3718      	adds	r7, #24
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	ffe1f7fd 	.word	0xffe1f7fd
 800035c:	ff1f0efe 	.word	0xff1f0efe

08000360 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b084      	sub	sp, #16
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000368:	2300      	movs	r3, #0
 800036a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000372:	2b01      	cmp	r3, #1
 8000374:	d101      	bne.n	800037a <HAL_ADC_Start+0x1a>
 8000376:	2302      	movs	r3, #2
 8000378:	e098      	b.n	80004ac <HAL_ADC_Start+0x14c>
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	2201      	movs	r2, #1
 800037e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000382:	6878      	ldr	r0, [r7, #4]
 8000384:	f000 fac4 	bl	8000910 <ADC_Enable>
 8000388:	4603      	mov	r3, r0
 800038a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800038c:	7bfb      	ldrb	r3, [r7, #15]
 800038e:	2b00      	cmp	r3, #0
 8000390:	f040 8087 	bne.w	80004a2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800039c:	f023 0301 	bic.w	r3, r3, #1
 80003a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a41      	ldr	r2, [pc, #260]	; (80004b4 <HAL_ADC_Start+0x154>)
 80003ae:	4293      	cmp	r3, r2
 80003b0:	d105      	bne.n	80003be <HAL_ADC_Start+0x5e>
 80003b2:	4b41      	ldr	r3, [pc, #260]	; (80004b8 <HAL_ADC_Start+0x158>)
 80003b4:	685b      	ldr	r3, [r3, #4]
 80003b6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d115      	bne.n	80003ea <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	685b      	ldr	r3, [r3, #4]
 80003d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d026      	beq.n	8000426 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80003e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80003e8:	e01d      	b.n	8000426 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4a2f      	ldr	r2, [pc, #188]	; (80004b8 <HAL_ADC_Start+0x158>)
 80003fc:	4293      	cmp	r3, r2
 80003fe:	d004      	beq.n	800040a <HAL_ADC_Start+0xaa>
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a2b      	ldr	r2, [pc, #172]	; (80004b4 <HAL_ADC_Start+0x154>)
 8000406:	4293      	cmp	r3, r2
 8000408:	d10d      	bne.n	8000426 <HAL_ADC_Start+0xc6>
 800040a:	4b2b      	ldr	r3, [pc, #172]	; (80004b8 <HAL_ADC_Start+0x158>)
 800040c:	685b      	ldr	r3, [r3, #4]
 800040e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000412:	2b00      	cmp	r3, #0
 8000414:	d007      	beq.n	8000426 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800041a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800041e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800042a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800042e:	2b00      	cmp	r3, #0
 8000430:	d006      	beq.n	8000440 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000436:	f023 0206 	bic.w	r2, r3, #6
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	62da      	str	r2, [r3, #44]	; 0x2c
 800043e:	e002      	b.n	8000446 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	2200      	movs	r2, #0
 8000444:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	2200      	movs	r2, #0
 800044a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	f06f 0202 	mvn.w	r2, #2
 8000456:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	689b      	ldr	r3, [r3, #8]
 800045e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000462:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000466:	d113      	bne.n	8000490 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800046c:	4a11      	ldr	r2, [pc, #68]	; (80004b4 <HAL_ADC_Start+0x154>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d105      	bne.n	800047e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000472:	4b11      	ldr	r3, [pc, #68]	; (80004b8 <HAL_ADC_Start+0x158>)
 8000474:	685b      	ldr	r3, [r3, #4]
 8000476:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800047a:	2b00      	cmp	r3, #0
 800047c:	d108      	bne.n	8000490 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	689a      	ldr	r2, [r3, #8]
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800048c:	609a      	str	r2, [r3, #8]
 800048e:	e00c      	b.n	80004aa <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	689a      	ldr	r2, [r3, #8]
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800049e:	609a      	str	r2, [r3, #8]
 80004a0:	e003      	b.n	80004aa <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	2200      	movs	r2, #0
 80004a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80004aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80004ac:	4618      	mov	r0, r3
 80004ae:	3710      	adds	r7, #16
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	40012800 	.word	0x40012800
 80004b8:	40012400 	.word	0x40012400

080004bc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80004c4:	2300      	movs	r3, #0
 80004c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80004ce:	2b01      	cmp	r3, #1
 80004d0:	d101      	bne.n	80004d6 <HAL_ADC_Stop+0x1a>
 80004d2:	2302      	movs	r3, #2
 80004d4:	e01a      	b.n	800050c <HAL_ADC_Stop+0x50>
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	2201      	movs	r2, #1
 80004da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80004de:	6878      	ldr	r0, [r7, #4]
 80004e0:	f000 fa68 	bl	80009b4 <ADC_ConversionStop_Disable>
 80004e4:	4603      	mov	r3, r0
 80004e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80004e8:	7bfb      	ldrb	r3, [r7, #15]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d109      	bne.n	8000502 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80004f6:	f023 0301 	bic.w	r3, r3, #1
 80004fa:	f043 0201 	orr.w	r2, r3, #1
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	2200      	movs	r2, #0
 8000506:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800050a:	7bfb      	ldrb	r3, [r7, #15]
}
 800050c:	4618      	mov	r0, r3
 800050e:	3710      	adds	r7, #16
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}

08000514 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000514:	b590      	push	{r4, r7, lr}
 8000516:	b087      	sub	sp, #28
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800051e:	2300      	movs	r3, #0
 8000520:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000522:	2300      	movs	r3, #0
 8000524:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000526:	2300      	movs	r3, #0
 8000528:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800052a:	f7ff fe37 	bl	800019c <HAL_GetTick>
 800052e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	689b      	ldr	r3, [r3, #8]
 8000536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800053a:	2b00      	cmp	r3, #0
 800053c:	d00b      	beq.n	8000556 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000542:	f043 0220 	orr.w	r2, r3, #32
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2200      	movs	r2, #0
 800054e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000552:	2301      	movs	r3, #1
 8000554:	e0c8      	b.n	80006e8 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000560:	2b00      	cmp	r3, #0
 8000562:	d12a      	bne.n	80005ba <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800056a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800056e:	2b00      	cmp	r3, #0
 8000570:	d123      	bne.n	80005ba <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000572:	e01a      	b.n	80005aa <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800057a:	d016      	beq.n	80005aa <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d007      	beq.n	8000592 <HAL_ADC_PollForConversion+0x7e>
 8000582:	f7ff fe0b 	bl	800019c <HAL_GetTick>
 8000586:	4602      	mov	r2, r0
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	1ad3      	subs	r3, r2, r3
 800058c:	683a      	ldr	r2, [r7, #0]
 800058e:	429a      	cmp	r2, r3
 8000590:	d20b      	bcs.n	80005aa <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000596:	f043 0204 	orr.w	r2, r3, #4
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2200      	movs	r2, #0
 80005a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80005a6:	2303      	movs	r3, #3
 80005a8:	e09e      	b.n	80006e8 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f003 0302 	and.w	r3, r3, #2
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d0dd      	beq.n	8000574 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80005b8:	e06c      	b.n	8000694 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80005ba:	4b4d      	ldr	r3, [pc, #308]	; (80006f0 <HAL_ADC_PollForConversion+0x1dc>)
 80005bc:	681c      	ldr	r4, [r3, #0]
 80005be:	2002      	movs	r0, #2
 80005c0:	f001 fdc6 	bl	8002150 <HAL_RCCEx_GetPeriphCLKFreq>
 80005c4:	4603      	mov	r3, r0
 80005c6:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	6919      	ldr	r1, [r3, #16]
 80005d0:	4b48      	ldr	r3, [pc, #288]	; (80006f4 <HAL_ADC_PollForConversion+0x1e0>)
 80005d2:	400b      	ands	r3, r1
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d118      	bne.n	800060a <HAL_ADC_PollForConversion+0xf6>
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	68d9      	ldr	r1, [r3, #12]
 80005de:	4b46      	ldr	r3, [pc, #280]	; (80006f8 <HAL_ADC_PollForConversion+0x1e4>)
 80005e0:	400b      	ands	r3, r1
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d111      	bne.n	800060a <HAL_ADC_PollForConversion+0xf6>
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	6919      	ldr	r1, [r3, #16]
 80005ec:	4b43      	ldr	r3, [pc, #268]	; (80006fc <HAL_ADC_PollForConversion+0x1e8>)
 80005ee:	400b      	ands	r3, r1
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d108      	bne.n	8000606 <HAL_ADC_PollForConversion+0xf2>
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	68d9      	ldr	r1, [r3, #12]
 80005fa:	4b41      	ldr	r3, [pc, #260]	; (8000700 <HAL_ADC_PollForConversion+0x1ec>)
 80005fc:	400b      	ands	r3, r1
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d101      	bne.n	8000606 <HAL_ADC_PollForConversion+0xf2>
 8000602:	2314      	movs	r3, #20
 8000604:	e020      	b.n	8000648 <HAL_ADC_PollForConversion+0x134>
 8000606:	2329      	movs	r3, #41	; 0x29
 8000608:	e01e      	b.n	8000648 <HAL_ADC_PollForConversion+0x134>
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	6919      	ldr	r1, [r3, #16]
 8000610:	4b3a      	ldr	r3, [pc, #232]	; (80006fc <HAL_ADC_PollForConversion+0x1e8>)
 8000612:	400b      	ands	r3, r1
 8000614:	2b00      	cmp	r3, #0
 8000616:	d106      	bne.n	8000626 <HAL_ADC_PollForConversion+0x112>
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	68d9      	ldr	r1, [r3, #12]
 800061e:	4b38      	ldr	r3, [pc, #224]	; (8000700 <HAL_ADC_PollForConversion+0x1ec>)
 8000620:	400b      	ands	r3, r1
 8000622:	2b00      	cmp	r3, #0
 8000624:	d00d      	beq.n	8000642 <HAL_ADC_PollForConversion+0x12e>
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	6919      	ldr	r1, [r3, #16]
 800062c:	4b35      	ldr	r3, [pc, #212]	; (8000704 <HAL_ADC_PollForConversion+0x1f0>)
 800062e:	400b      	ands	r3, r1
 8000630:	2b00      	cmp	r3, #0
 8000632:	d108      	bne.n	8000646 <HAL_ADC_PollForConversion+0x132>
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	68d9      	ldr	r1, [r3, #12]
 800063a:	4b32      	ldr	r3, [pc, #200]	; (8000704 <HAL_ADC_PollForConversion+0x1f0>)
 800063c:	400b      	ands	r3, r1
 800063e:	2b00      	cmp	r3, #0
 8000640:	d101      	bne.n	8000646 <HAL_ADC_PollForConversion+0x132>
 8000642:	2354      	movs	r3, #84	; 0x54
 8000644:	e000      	b.n	8000648 <HAL_ADC_PollForConversion+0x134>
 8000646:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000648:	fb02 f303 	mul.w	r3, r2, r3
 800064c:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800064e:	e01d      	b.n	800068c <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000656:	d016      	beq.n	8000686 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d007      	beq.n	800066e <HAL_ADC_PollForConversion+0x15a>
 800065e:	f7ff fd9d 	bl	800019c <HAL_GetTick>
 8000662:	4602      	mov	r2, r0
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	1ad3      	subs	r3, r2, r3
 8000668:	683a      	ldr	r2, [r7, #0]
 800066a:	429a      	cmp	r2, r3
 800066c:	d20b      	bcs.n	8000686 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000672:	f043 0204 	orr.w	r2, r3, #4
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2200      	movs	r2, #0
 800067e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000682:	2303      	movs	r3, #3
 8000684:	e030      	b.n	80006e8 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	3301      	adds	r3, #1
 800068a:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	693a      	ldr	r2, [r7, #16]
 8000690:	429a      	cmp	r2, r3
 8000692:	d8dd      	bhi.n	8000650 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f06f 0212 	mvn.w	r2, #18
 800069c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	689b      	ldr	r3, [r3, #8]
 80006b0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80006b4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80006b8:	d115      	bne.n	80006e6 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d111      	bne.n	80006e6 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d105      	bne.n	80006e6 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006de:	f043 0201 	orr.w	r2, r3, #1
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80006e6:	2300      	movs	r3, #0
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	371c      	adds	r7, #28
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd90      	pop	{r4, r7, pc}
 80006f0:	2000000c 	.word	0x2000000c
 80006f4:	24924924 	.word	0x24924924
 80006f8:	00924924 	.word	0x00924924
 80006fc:	12492492 	.word	0x12492492
 8000700:	00492492 	.word	0x00492492
 8000704:	00249249 	.word	0x00249249

08000708 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000716:	4618      	mov	r0, r3
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr

08000720 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800072a:	2300      	movs	r3, #0
 800072c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000738:	2b01      	cmp	r3, #1
 800073a:	d101      	bne.n	8000740 <HAL_ADC_ConfigChannel+0x20>
 800073c:	2302      	movs	r3, #2
 800073e:	e0dc      	b.n	80008fa <HAL_ADC_ConfigChannel+0x1da>
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2201      	movs	r2, #1
 8000744:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	2b06      	cmp	r3, #6
 800074e:	d81c      	bhi.n	800078a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	685a      	ldr	r2, [r3, #4]
 800075a:	4613      	mov	r3, r2
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	4413      	add	r3, r2
 8000760:	3b05      	subs	r3, #5
 8000762:	221f      	movs	r2, #31
 8000764:	fa02 f303 	lsl.w	r3, r2, r3
 8000768:	43db      	mvns	r3, r3
 800076a:	4019      	ands	r1, r3
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	6818      	ldr	r0, [r3, #0]
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	685a      	ldr	r2, [r3, #4]
 8000774:	4613      	mov	r3, r2
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	4413      	add	r3, r2
 800077a:	3b05      	subs	r3, #5
 800077c:	fa00 f203 	lsl.w	r2, r0, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	430a      	orrs	r2, r1
 8000786:	635a      	str	r2, [r3, #52]	; 0x34
 8000788:	e03c      	b.n	8000804 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	685b      	ldr	r3, [r3, #4]
 800078e:	2b0c      	cmp	r3, #12
 8000790:	d81c      	bhi.n	80007cc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	685a      	ldr	r2, [r3, #4]
 800079c:	4613      	mov	r3, r2
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	4413      	add	r3, r2
 80007a2:	3b23      	subs	r3, #35	; 0x23
 80007a4:	221f      	movs	r2, #31
 80007a6:	fa02 f303 	lsl.w	r3, r2, r3
 80007aa:	43db      	mvns	r3, r3
 80007ac:	4019      	ands	r1, r3
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	6818      	ldr	r0, [r3, #0]
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	685a      	ldr	r2, [r3, #4]
 80007b6:	4613      	mov	r3, r2
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	4413      	add	r3, r2
 80007bc:	3b23      	subs	r3, #35	; 0x23
 80007be:	fa00 f203 	lsl.w	r2, r0, r3
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	430a      	orrs	r2, r1
 80007c8:	631a      	str	r2, [r3, #48]	; 0x30
 80007ca:	e01b      	b.n	8000804 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	685a      	ldr	r2, [r3, #4]
 80007d6:	4613      	mov	r3, r2
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	4413      	add	r3, r2
 80007dc:	3b41      	subs	r3, #65	; 0x41
 80007de:	221f      	movs	r2, #31
 80007e0:	fa02 f303 	lsl.w	r3, r2, r3
 80007e4:	43db      	mvns	r3, r3
 80007e6:	4019      	ands	r1, r3
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	6818      	ldr	r0, [r3, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	685a      	ldr	r2, [r3, #4]
 80007f0:	4613      	mov	r3, r2
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	4413      	add	r3, r2
 80007f6:	3b41      	subs	r3, #65	; 0x41
 80007f8:	fa00 f203 	lsl.w	r2, r0, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	430a      	orrs	r2, r1
 8000802:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b09      	cmp	r3, #9
 800080a:	d91c      	bls.n	8000846 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	68d9      	ldr	r1, [r3, #12]
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	4613      	mov	r3, r2
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	4413      	add	r3, r2
 800081c:	3b1e      	subs	r3, #30
 800081e:	2207      	movs	r2, #7
 8000820:	fa02 f303 	lsl.w	r3, r2, r3
 8000824:	43db      	mvns	r3, r3
 8000826:	4019      	ands	r1, r3
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	6898      	ldr	r0, [r3, #8]
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	4613      	mov	r3, r2
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	4413      	add	r3, r2
 8000836:	3b1e      	subs	r3, #30
 8000838:	fa00 f203 	lsl.w	r2, r0, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	430a      	orrs	r2, r1
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	e019      	b.n	800087a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	6919      	ldr	r1, [r3, #16]
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	4613      	mov	r3, r2
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	4413      	add	r3, r2
 8000856:	2207      	movs	r2, #7
 8000858:	fa02 f303 	lsl.w	r3, r2, r3
 800085c:	43db      	mvns	r3, r3
 800085e:	4019      	ands	r1, r3
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	6898      	ldr	r0, [r3, #8]
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	4613      	mov	r3, r2
 800086a:	005b      	lsls	r3, r3, #1
 800086c:	4413      	add	r3, r2
 800086e:	fa00 f203 	lsl.w	r2, r0, r3
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	430a      	orrs	r2, r1
 8000878:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	2b10      	cmp	r3, #16
 8000880:	d003      	beq.n	800088a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000886:	2b11      	cmp	r3, #17
 8000888:	d132      	bne.n	80008f0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a1d      	ldr	r2, [pc, #116]	; (8000904 <HAL_ADC_ConfigChannel+0x1e4>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d125      	bne.n	80008e0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	689b      	ldr	r3, [r3, #8]
 800089a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d126      	bne.n	80008f0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	689a      	ldr	r2, [r3, #8]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80008b0:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2b10      	cmp	r3, #16
 80008b8:	d11a      	bne.n	80008f0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80008ba:	4b13      	ldr	r3, [pc, #76]	; (8000908 <HAL_ADC_ConfigChannel+0x1e8>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a13      	ldr	r2, [pc, #76]	; (800090c <HAL_ADC_ConfigChannel+0x1ec>)
 80008c0:	fba2 2303 	umull	r2, r3, r2, r3
 80008c4:	0c9a      	lsrs	r2, r3, #18
 80008c6:	4613      	mov	r3, r2
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	4413      	add	r3, r2
 80008cc:	005b      	lsls	r3, r3, #1
 80008ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80008d0:	e002      	b.n	80008d8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	3b01      	subs	r3, #1
 80008d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d1f9      	bne.n	80008d2 <HAL_ADC_ConfigChannel+0x1b2>
 80008de:	e007      	b.n	80008f0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008e4:	f043 0220 	orr.w	r2, r3, #32
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80008ec:	2301      	movs	r3, #1
 80008ee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2200      	movs	r2, #0
 80008f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80008f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3714      	adds	r7, #20
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr
 8000904:	40012400 	.word	0x40012400
 8000908:	2000000c 	.word	0x2000000c
 800090c:	431bde83 	.word	0x431bde83

08000910 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800091c:	2300      	movs	r3, #0
 800091e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	2b01      	cmp	r3, #1
 800092c:	d039      	beq.n	80009a2 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	689a      	ldr	r2, [r3, #8]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f042 0201 	orr.w	r2, r2, #1
 800093c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800093e:	4b1b      	ldr	r3, [pc, #108]	; (80009ac <ADC_Enable+0x9c>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a1b      	ldr	r2, [pc, #108]	; (80009b0 <ADC_Enable+0xa0>)
 8000944:	fba2 2303 	umull	r2, r3, r2, r3
 8000948:	0c9b      	lsrs	r3, r3, #18
 800094a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800094c:	e002      	b.n	8000954 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	3b01      	subs	r3, #1
 8000952:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d1f9      	bne.n	800094e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800095a:	f7ff fc1f 	bl	800019c <HAL_GetTick>
 800095e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000960:	e018      	b.n	8000994 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000962:	f7ff fc1b 	bl	800019c <HAL_GetTick>
 8000966:	4602      	mov	r2, r0
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	1ad3      	subs	r3, r2, r3
 800096c:	2b02      	cmp	r3, #2
 800096e:	d911      	bls.n	8000994 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000974:	f043 0210 	orr.w	r2, r3, #16
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000980:	f043 0201 	orr.w	r2, r3, #1
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2200      	movs	r2, #0
 800098c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8000990:	2301      	movs	r3, #1
 8000992:	e007      	b.n	80009a4 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	689b      	ldr	r3, [r3, #8]
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d1df      	bne.n	8000962 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80009a2:	2300      	movs	r3, #0
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	2000000c 	.word	0x2000000c
 80009b0:	431bde83 	.word	0x431bde83

080009b4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80009bc:	2300      	movs	r3, #0
 80009be:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	689b      	ldr	r3, [r3, #8]
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d127      	bne.n	8000a1e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	689a      	ldr	r2, [r3, #8]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f022 0201 	bic.w	r2, r2, #1
 80009dc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80009de:	f7ff fbdd 	bl	800019c <HAL_GetTick>
 80009e2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80009e4:	e014      	b.n	8000a10 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80009e6:	f7ff fbd9 	bl	800019c <HAL_GetTick>
 80009ea:	4602      	mov	r2, r0
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	1ad3      	subs	r3, r2, r3
 80009f0:	2b02      	cmp	r3, #2
 80009f2:	d90d      	bls.n	8000a10 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009f8:	f043 0210 	orr.w	r2, r3, #16
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a04:	f043 0201 	orr.w	r2, r3, #1
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	e007      	b.n	8000a20 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	689b      	ldr	r3, [r3, #8]
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d0e3      	beq.n	80009e6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000a1e:	2300      	movs	r3, #0
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d101      	bne.n	8000a3a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	e0ed      	b.n	8000c16 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d102      	bne.n	8000a4c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f002 fa40 	bl	8002ecc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f022 0202 	bic.w	r2, r2, #2
 8000a5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a5c:	f7ff fb9e 	bl	800019c <HAL_GetTick>
 8000a60:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a62:	e012      	b.n	8000a8a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a64:	f7ff fb9a 	bl	800019c <HAL_GetTick>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	2b0a      	cmp	r3, #10
 8000a70:	d90b      	bls.n	8000a8a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a76:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2205      	movs	r2, #5
 8000a82:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	e0c5      	b.n	8000c16 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f003 0302 	and.w	r3, r3, #2
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d1e5      	bne.n	8000a64 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f042 0201 	orr.w	r2, r2, #1
 8000aa6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000aa8:	f7ff fb78 	bl	800019c <HAL_GetTick>
 8000aac:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000aae:	e012      	b.n	8000ad6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ab0:	f7ff fb74 	bl	800019c <HAL_GetTick>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	2b0a      	cmp	r3, #10
 8000abc:	d90b      	bls.n	8000ad6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ac2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2205      	movs	r2, #5
 8000ace:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e09f      	b.n	8000c16 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f003 0301 	and.w	r3, r3, #1
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d0e5      	beq.n	8000ab0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	7e1b      	ldrb	r3, [r3, #24]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d108      	bne.n	8000afe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	e007      	b.n	8000b0e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	7e5b      	ldrb	r3, [r3, #25]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d108      	bne.n	8000b28 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	e007      	b.n	8000b38 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000b36:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	7e9b      	ldrb	r3, [r3, #26]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d108      	bne.n	8000b52 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f042 0220 	orr.w	r2, r2, #32
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	e007      	b.n	8000b62 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f022 0220 	bic.w	r2, r2, #32
 8000b60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	7edb      	ldrb	r3, [r3, #27]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d108      	bne.n	8000b7c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f022 0210 	bic.w	r2, r2, #16
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	e007      	b.n	8000b8c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f042 0210 	orr.w	r2, r2, #16
 8000b8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	7f1b      	ldrb	r3, [r3, #28]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d108      	bne.n	8000ba6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f042 0208 	orr.w	r2, r2, #8
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	e007      	b.n	8000bb6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f022 0208 	bic.w	r2, r2, #8
 8000bb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	7f5b      	ldrb	r3, [r3, #29]
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d108      	bne.n	8000bd0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f042 0204 	orr.w	r2, r2, #4
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	e007      	b.n	8000be0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f022 0204 	bic.w	r2, r2, #4
 8000bde:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	689a      	ldr	r2, [r3, #8]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	431a      	orrs	r2, r3
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	691b      	ldr	r3, [r3, #16]
 8000bee:	431a      	orrs	r2, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	695b      	ldr	r3, [r3, #20]
 8000bf4:	ea42 0103 	orr.w	r1, r2, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	1e5a      	subs	r2, r3, #1
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	430a      	orrs	r2, r1
 8000c04:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2201      	movs	r2, #1
 8000c10:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	b087      	sub	sp, #28
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
 8000c26:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c34:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000c36:	7cfb      	ldrb	r3, [r7, #19]
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d003      	beq.n	8000c44 <HAL_CAN_ConfigFilter+0x26>
 8000c3c:	7cfb      	ldrb	r3, [r7, #19]
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	f040 80aa 	bne.w	8000d98 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000c4a:	f043 0201 	orr.w	r2, r3, #1
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	695b      	ldr	r3, [r3, #20]
 8000c58:	f003 031f 	and.w	r3, r3, #31
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	401a      	ands	r2, r3
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	69db      	ldr	r3, [r3, #28]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d123      	bne.n	8000cc6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	43db      	mvns	r3, r3
 8000c88:	401a      	ands	r2, r3
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c9c:	683a      	ldr	r2, [r7, #0]
 8000c9e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ca0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	3248      	adds	r2, #72	; 0x48
 8000ca6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cba:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cbc:	6979      	ldr	r1, [r7, #20]
 8000cbe:	3348      	adds	r3, #72	; 0x48
 8000cc0:	00db      	lsls	r3, r3, #3
 8000cc2:	440b      	add	r3, r1
 8000cc4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	69db      	ldr	r3, [r3, #28]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d122      	bne.n	8000d14 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	431a      	orrs	r2, r3
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cea:	683a      	ldr	r2, [r7, #0]
 8000cec:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000cee:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	3248      	adds	r2, #72	; 0x48
 8000cf4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	68db      	ldr	r3, [r3, #12]
 8000d02:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d08:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d0a:	6979      	ldr	r1, [r7, #20]
 8000d0c:	3348      	adds	r3, #72	; 0x48
 8000d0e:	00db      	lsls	r3, r3, #3
 8000d10:	440b      	add	r3, r1
 8000d12:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d109      	bne.n	8000d30 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	43db      	mvns	r3, r3
 8000d26:	401a      	ands	r2, r3
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000d2e:	e007      	b.n	8000d40 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	431a      	orrs	r2, r3
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	691b      	ldr	r3, [r3, #16]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d109      	bne.n	8000d5c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	43db      	mvns	r3, r3
 8000d52:	401a      	ands	r2, r3
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000d5a:	e007      	b.n	8000d6c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	431a      	orrs	r2, r3
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	6a1b      	ldr	r3, [r3, #32]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d107      	bne.n	8000d84 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	431a      	orrs	r2, r3
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d8a:	f023 0201 	bic.w	r2, r3, #1
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000d94:	2300      	movs	r3, #0
 8000d96:	e006      	b.n	8000da6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d9c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
  }
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	371c      	adds	r7, #28
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr

08000db0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d12e      	bne.n	8000e22 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2202      	movs	r2, #2
 8000dc8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f022 0201 	bic.w	r2, r2, #1
 8000dda:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000ddc:	f7ff f9de 	bl	800019c <HAL_GetTick>
 8000de0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000de2:	e012      	b.n	8000e0a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000de4:	f7ff f9da 	bl	800019c <HAL_GetTick>
 8000de8:	4602      	mov	r2, r0
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	2b0a      	cmp	r3, #10
 8000df0:	d90b      	bls.n	8000e0a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2205      	movs	r2, #5
 8000e02:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e012      	b.n	8000e30 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d1e5      	bne.n	8000de4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	e006      	b.n	8000e30 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e26:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
  }
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e48:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d002      	beq.n	8000e56 <HAL_CAN_ActivateNotification+0x1e>
 8000e50:	7bfb      	ldrb	r3, [r7, #15]
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d109      	bne.n	8000e6a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	6959      	ldr	r1, [r3, #20]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	683a      	ldr	r2, [r7, #0]
 8000e62:	430a      	orrs	r2, r1
 8000e64:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000e66:	2300      	movs	r3, #0
 8000e68:	e006      	b.n	8000e78 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
  }
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr

08000e82 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b08a      	sub	sp, #40	; 0x28
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	695b      	ldr	r3, [r3, #20]
 8000e94:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	691b      	ldr	r3, [r3, #16]
 8000eb4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000ebe:	6a3b      	ldr	r3, [r7, #32]
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d07c      	beq.n	8000fc2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d023      	beq.n	8000f1a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	f003 0302 	and.w	r3, r3, #2
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d003      	beq.n	8000eec <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f000 f97d 	bl	80011e4 <HAL_CAN_TxMailbox0CompleteCallback>
 8000eea:	e016      	b.n	8000f1a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	f003 0304 	and.w	r3, r3, #4
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d004      	beq.n	8000f00 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000efc:	627b      	str	r3, [r7, #36]	; 0x24
 8000efe:	e00c      	b.n	8000f1a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	f003 0308 	and.w	r3, r3, #8
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d004      	beq.n	8000f14 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
 8000f12:	e002      	b.n	8000f1a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f000 f980 	bl	800121a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d024      	beq.n	8000f6e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f2c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d003      	beq.n	8000f40 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f000 f95c 	bl	80011f6 <HAL_CAN_TxMailbox1CompleteCallback>
 8000f3e:	e016      	b.n	8000f6e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d004      	beq.n	8000f54 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
 8000f52:	e00c      	b.n	8000f6e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d004      	beq.n	8000f68 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
 8000f66:	e002      	b.n	8000f6e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f000 f95f 	bl	800122c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d024      	beq.n	8000fc2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f80:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d003      	beq.n	8000f94 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f000 f93b 	bl	8001208 <HAL_CAN_TxMailbox2CompleteCallback>
 8000f92:	e016      	b.n	8000fc2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d004      	beq.n	8000fa8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8000fa6:	e00c      	b.n	8000fc2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d004      	beq.n	8000fbc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8000fba:	e002      	b.n	8000fc2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f000 f93e 	bl	800123e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000fc2:	6a3b      	ldr	r3, [r7, #32]
 8000fc4:	f003 0308 	and.w	r3, r3, #8
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d00c      	beq.n	8000fe6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	f003 0310 	and.w	r3, r3, #16
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d007      	beq.n	8000fe6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2210      	movs	r2, #16
 8000fe4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000fe6:	6a3b      	ldr	r3, [r7, #32]
 8000fe8:	f003 0304 	and.w	r3, r3, #4
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d00b      	beq.n	8001008 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	f003 0308 	and.w	r3, r3, #8
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d006      	beq.n	8001008 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2208      	movs	r2, #8
 8001000:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f000 f92d 	bl	8001262 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001008:	6a3b      	ldr	r3, [r7, #32]
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	2b00      	cmp	r3, #0
 8001010:	d009      	beq.n	8001026 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	f003 0303 	and.w	r3, r3, #3
 800101c:	2b00      	cmp	r3, #0
 800101e:	d002      	beq.n	8001026 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f000 f915 	bl	8001250 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001026:	6a3b      	ldr	r3, [r7, #32]
 8001028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800102c:	2b00      	cmp	r3, #0
 800102e:	d00c      	beq.n	800104a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	f003 0310 	and.w	r3, r3, #16
 8001036:	2b00      	cmp	r3, #0
 8001038:	d007      	beq.n	800104a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800103a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001040:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2210      	movs	r2, #16
 8001048:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800104a:	6a3b      	ldr	r3, [r7, #32]
 800104c:	f003 0320 	and.w	r3, r3, #32
 8001050:	2b00      	cmp	r3, #0
 8001052:	d00b      	beq.n	800106c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	f003 0308 	and.w	r3, r3, #8
 800105a:	2b00      	cmp	r3, #0
 800105c:	d006      	beq.n	800106c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2208      	movs	r2, #8
 8001064:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 f90d 	bl	8001286 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800106c:	6a3b      	ldr	r3, [r7, #32]
 800106e:	f003 0310 	and.w	r3, r3, #16
 8001072:	2b00      	cmp	r3, #0
 8001074:	d009      	beq.n	800108a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	691b      	ldr	r3, [r3, #16]
 800107c:	f003 0303 	and.w	r3, r3, #3
 8001080:	2b00      	cmp	r3, #0
 8001082:	d002      	beq.n	800108a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 f8f5 	bl	8001274 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800108a:	6a3b      	ldr	r3, [r7, #32]
 800108c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d00b      	beq.n	80010ac <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f003 0310 	and.w	r3, r3, #16
 800109a:	2b00      	cmp	r3, #0
 800109c:	d006      	beq.n	80010ac <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2210      	movs	r2, #16
 80010a4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f000 f8f6 	bl	8001298 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80010ac:	6a3b      	ldr	r3, [r7, #32]
 80010ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d00b      	beq.n	80010ce <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	f003 0308 	and.w	r3, r3, #8
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d006      	beq.n	80010ce <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2208      	movs	r2, #8
 80010c6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f000 f8ee 	bl	80012aa <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80010ce:	6a3b      	ldr	r3, [r7, #32]
 80010d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d075      	beq.n	80011c4 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f003 0304 	and.w	r3, r3, #4
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d06c      	beq.n	80011bc <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80010e2:	6a3b      	ldr	r3, [r7, #32]
 80010e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d008      	beq.n	80010fe <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80010f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80010fe:	6a3b      	ldr	r3, [r7, #32]
 8001100:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001104:	2b00      	cmp	r3, #0
 8001106:	d008      	beq.n	800111a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001114:	f043 0302 	orr.w	r3, r3, #2
 8001118:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800111a:	6a3b      	ldr	r3, [r7, #32]
 800111c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001120:	2b00      	cmp	r3, #0
 8001122:	d008      	beq.n	8001136 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800112e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001130:	f043 0304 	orr.w	r3, r3, #4
 8001134:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001136:	6a3b      	ldr	r3, [r7, #32]
 8001138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800113c:	2b00      	cmp	r3, #0
 800113e:	d03d      	beq.n	80011bc <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001146:	2b00      	cmp	r3, #0
 8001148:	d038      	beq.n	80011bc <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001150:	2b30      	cmp	r3, #48	; 0x30
 8001152:	d017      	beq.n	8001184 <HAL_CAN_IRQHandler+0x302>
 8001154:	2b30      	cmp	r3, #48	; 0x30
 8001156:	d804      	bhi.n	8001162 <HAL_CAN_IRQHandler+0x2e0>
 8001158:	2b10      	cmp	r3, #16
 800115a:	d009      	beq.n	8001170 <HAL_CAN_IRQHandler+0x2ee>
 800115c:	2b20      	cmp	r3, #32
 800115e:	d00c      	beq.n	800117a <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001160:	e024      	b.n	80011ac <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001162:	2b50      	cmp	r3, #80	; 0x50
 8001164:	d018      	beq.n	8001198 <HAL_CAN_IRQHandler+0x316>
 8001166:	2b60      	cmp	r3, #96	; 0x60
 8001168:	d01b      	beq.n	80011a2 <HAL_CAN_IRQHandler+0x320>
 800116a:	2b40      	cmp	r3, #64	; 0x40
 800116c:	d00f      	beq.n	800118e <HAL_CAN_IRQHandler+0x30c>
            break;
 800116e:	e01d      	b.n	80011ac <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001172:	f043 0308 	orr.w	r3, r3, #8
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001178:	e018      	b.n	80011ac <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117c:	f043 0310 	orr.w	r3, r3, #16
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001182:	e013      	b.n	80011ac <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001186:	f043 0320 	orr.w	r3, r3, #32
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800118c:	e00e      	b.n	80011ac <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 800118e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001196:	e009      	b.n	80011ac <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80011a0:	e004      	b.n	80011ac <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80011a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80011aa:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	699a      	ldr	r2, [r3, #24]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80011ba:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2204      	movs	r2, #4
 80011c2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80011c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d008      	beq.n	80011dc <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d0:	431a      	orrs	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f000 f870 	bl	80012bc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80011dc:	bf00      	nop
 80011de:	3728      	adds	r7, #40	; 0x28
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr

080011f6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr

08001208 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr

0800121a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800121a:	b480      	push	{r7}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr

0800122c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr

0800123e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr

08001250 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr

08001262 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001262:	b480      	push	{r7}
 8001264:	b083      	sub	sp, #12
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr

08001274 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr

08001286 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001286:	b480      	push	{r7}
 8001288:	b083      	sub	sp, #12
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr

08001298 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr

080012aa <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80012aa:	b480      	push	{r7}
 80012ac:	b083      	sub	sp, #12
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr

080012bc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr
	...

080012d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012ec:	4013      	ands	r3, r2
 80012ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001302:	4a04      	ldr	r2, [pc, #16]	; (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	60d3      	str	r3, [r2, #12]
}
 8001308:	bf00      	nop
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800131c:	4b04      	ldr	r3, [pc, #16]	; (8001330 <__NVIC_GetPriorityGrouping+0x18>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	0a1b      	lsrs	r3, r3, #8
 8001322:	f003 0307 	and.w	r3, r3, #7
}
 8001326:	4618      	mov	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	2b00      	cmp	r3, #0
 8001344:	db0b      	blt.n	800135e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	f003 021f 	and.w	r2, r3, #31
 800134c:	4906      	ldr	r1, [pc, #24]	; (8001368 <__NVIC_EnableIRQ+0x34>)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	095b      	lsrs	r3, r3, #5
 8001354:	2001      	movs	r0, #1
 8001356:	fa00 f202 	lsl.w	r2, r0, r2
 800135a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr
 8001368:	e000e100 	.word	0xe000e100

0800136c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	6039      	str	r1, [r7, #0]
 8001376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137c:	2b00      	cmp	r3, #0
 800137e:	db0a      	blt.n	8001396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	b2da      	uxtb	r2, r3
 8001384:	490c      	ldr	r1, [pc, #48]	; (80013b8 <__NVIC_SetPriority+0x4c>)
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	0112      	lsls	r2, r2, #4
 800138c:	b2d2      	uxtb	r2, r2
 800138e:	440b      	add	r3, r1
 8001390:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001394:	e00a      	b.n	80013ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	b2da      	uxtb	r2, r3
 800139a:	4908      	ldr	r1, [pc, #32]	; (80013bc <__NVIC_SetPriority+0x50>)
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	f003 030f 	and.w	r3, r3, #15
 80013a2:	3b04      	subs	r3, #4
 80013a4:	0112      	lsls	r2, r2, #4
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	440b      	add	r3, r1
 80013aa:	761a      	strb	r2, [r3, #24]
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000e100 	.word	0xe000e100
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b089      	sub	sp, #36	; 0x24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	f1c3 0307 	rsb	r3, r3, #7
 80013da:	2b04      	cmp	r3, #4
 80013dc:	bf28      	it	cs
 80013de:	2304      	movcs	r3, #4
 80013e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3304      	adds	r3, #4
 80013e6:	2b06      	cmp	r3, #6
 80013e8:	d902      	bls.n	80013f0 <NVIC_EncodePriority+0x30>
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3b03      	subs	r3, #3
 80013ee:	e000      	b.n	80013f2 <NVIC_EncodePriority+0x32>
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f4:	f04f 32ff 	mov.w	r2, #4294967295
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43da      	mvns	r2, r3
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	401a      	ands	r2, r3
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001408:	f04f 31ff 	mov.w	r1, #4294967295
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	fa01 f303 	lsl.w	r3, r1, r3
 8001412:	43d9      	mvns	r1, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001418:	4313      	orrs	r3, r2
         );
}
 800141a:	4618      	mov	r0, r3
 800141c:	3724      	adds	r7, #36	; 0x24
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr

08001424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff ff4f 	bl	80012d0 <__NVIC_SetPriorityGrouping>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800143a:	b580      	push	{r7, lr}
 800143c:	b086      	sub	sp, #24
 800143e:	af00      	add	r7, sp, #0
 8001440:	4603      	mov	r3, r0
 8001442:	60b9      	str	r1, [r7, #8]
 8001444:	607a      	str	r2, [r7, #4]
 8001446:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800144c:	f7ff ff64 	bl	8001318 <__NVIC_GetPriorityGrouping>
 8001450:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	68b9      	ldr	r1, [r7, #8]
 8001456:	6978      	ldr	r0, [r7, #20]
 8001458:	f7ff ffb2 	bl	80013c0 <NVIC_EncodePriority>
 800145c:	4602      	mov	r2, r0
 800145e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001462:	4611      	mov	r1, r2
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff81 	bl	800136c <__NVIC_SetPriority>
}
 800146a:	bf00      	nop
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
 8001478:	4603      	mov	r3, r0
 800147a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800147c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff57 	bl	8001334 <__NVIC_EnableIRQ>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001490:	b480      	push	{r7}
 8001492:	b08b      	sub	sp, #44	; 0x2c
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800149a:	2300      	movs	r3, #0
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800149e:	2300      	movs	r3, #0
 80014a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014a2:	e127      	b.n	80016f4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014a4:	2201      	movs	r2, #1
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	69fa      	ldr	r2, [r7, #28]
 80014b4:	4013      	ands	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	429a      	cmp	r2, r3
 80014be:	f040 8116 	bne.w	80016ee <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	2b12      	cmp	r3, #18
 80014c8:	d034      	beq.n	8001534 <HAL_GPIO_Init+0xa4>
 80014ca:	2b12      	cmp	r3, #18
 80014cc:	d80d      	bhi.n	80014ea <HAL_GPIO_Init+0x5a>
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d02b      	beq.n	800152a <HAL_GPIO_Init+0x9a>
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d804      	bhi.n	80014e0 <HAL_GPIO_Init+0x50>
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d031      	beq.n	800153e <HAL_GPIO_Init+0xae>
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d01c      	beq.n	8001518 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014de:	e048      	b.n	8001572 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014e0:	2b03      	cmp	r3, #3
 80014e2:	d043      	beq.n	800156c <HAL_GPIO_Init+0xdc>
 80014e4:	2b11      	cmp	r3, #17
 80014e6:	d01b      	beq.n	8001520 <HAL_GPIO_Init+0x90>
          break;
 80014e8:	e043      	b.n	8001572 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014ea:	4a89      	ldr	r2, [pc, #548]	; (8001710 <HAL_GPIO_Init+0x280>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d026      	beq.n	800153e <HAL_GPIO_Init+0xae>
 80014f0:	4a87      	ldr	r2, [pc, #540]	; (8001710 <HAL_GPIO_Init+0x280>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d806      	bhi.n	8001504 <HAL_GPIO_Init+0x74>
 80014f6:	4a87      	ldr	r2, [pc, #540]	; (8001714 <HAL_GPIO_Init+0x284>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d020      	beq.n	800153e <HAL_GPIO_Init+0xae>
 80014fc:	4a86      	ldr	r2, [pc, #536]	; (8001718 <HAL_GPIO_Init+0x288>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d01d      	beq.n	800153e <HAL_GPIO_Init+0xae>
          break;
 8001502:	e036      	b.n	8001572 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001504:	4a85      	ldr	r2, [pc, #532]	; (800171c <HAL_GPIO_Init+0x28c>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d019      	beq.n	800153e <HAL_GPIO_Init+0xae>
 800150a:	4a85      	ldr	r2, [pc, #532]	; (8001720 <HAL_GPIO_Init+0x290>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d016      	beq.n	800153e <HAL_GPIO_Init+0xae>
 8001510:	4a84      	ldr	r2, [pc, #528]	; (8001724 <HAL_GPIO_Init+0x294>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d013      	beq.n	800153e <HAL_GPIO_Init+0xae>
          break;
 8001516:	e02c      	b.n	8001572 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	623b      	str	r3, [r7, #32]
          break;
 800151e:	e028      	b.n	8001572 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	3304      	adds	r3, #4
 8001526:	623b      	str	r3, [r7, #32]
          break;
 8001528:	e023      	b.n	8001572 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	3308      	adds	r3, #8
 8001530:	623b      	str	r3, [r7, #32]
          break;
 8001532:	e01e      	b.n	8001572 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	330c      	adds	r3, #12
 800153a:	623b      	str	r3, [r7, #32]
          break;
 800153c:	e019      	b.n	8001572 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d102      	bne.n	800154c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001546:	2304      	movs	r3, #4
 8001548:	623b      	str	r3, [r7, #32]
          break;
 800154a:	e012      	b.n	8001572 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d105      	bne.n	8001560 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001554:	2308      	movs	r3, #8
 8001556:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	69fa      	ldr	r2, [r7, #28]
 800155c:	611a      	str	r2, [r3, #16]
          break;
 800155e:	e008      	b.n	8001572 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001560:	2308      	movs	r3, #8
 8001562:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69fa      	ldr	r2, [r7, #28]
 8001568:	615a      	str	r2, [r3, #20]
          break;
 800156a:	e002      	b.n	8001572 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800156c:	2300      	movs	r3, #0
 800156e:	623b      	str	r3, [r7, #32]
          break;
 8001570:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	2bff      	cmp	r3, #255	; 0xff
 8001576:	d801      	bhi.n	800157c <HAL_GPIO_Init+0xec>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	e001      	b.n	8001580 <HAL_GPIO_Init+0xf0>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3304      	adds	r3, #4
 8001580:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	2bff      	cmp	r3, #255	; 0xff
 8001586:	d802      	bhi.n	800158e <HAL_GPIO_Init+0xfe>
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	e002      	b.n	8001594 <HAL_GPIO_Init+0x104>
 800158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001590:	3b08      	subs	r3, #8
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	210f      	movs	r1, #15
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	fa01 f303 	lsl.w	r3, r1, r3
 80015a2:	43db      	mvns	r3, r3
 80015a4:	401a      	ands	r2, r3
 80015a6:	6a39      	ldr	r1, [r7, #32]
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	fa01 f303 	lsl.w	r3, r1, r3
 80015ae:	431a      	orrs	r2, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f000 8096 	beq.w	80016ee <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015c2:	4b59      	ldr	r3, [pc, #356]	; (8001728 <HAL_GPIO_Init+0x298>)
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	4a58      	ldr	r2, [pc, #352]	; (8001728 <HAL_GPIO_Init+0x298>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6193      	str	r3, [r2, #24]
 80015ce:	4b56      	ldr	r3, [pc, #344]	; (8001728 <HAL_GPIO_Init+0x298>)
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015da:	4a54      	ldr	r2, [pc, #336]	; (800172c <HAL_GPIO_Init+0x29c>)
 80015dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015de:	089b      	lsrs	r3, r3, #2
 80015e0:	3302      	adds	r3, #2
 80015e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ea:	f003 0303 	and.w	r3, r3, #3
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	220f      	movs	r2, #15
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43db      	mvns	r3, r3
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	4013      	ands	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a4b      	ldr	r2, [pc, #300]	; (8001730 <HAL_GPIO_Init+0x2a0>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d013      	beq.n	800162e <HAL_GPIO_Init+0x19e>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a4a      	ldr	r2, [pc, #296]	; (8001734 <HAL_GPIO_Init+0x2a4>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d00d      	beq.n	800162a <HAL_GPIO_Init+0x19a>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a49      	ldr	r2, [pc, #292]	; (8001738 <HAL_GPIO_Init+0x2a8>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d007      	beq.n	8001626 <HAL_GPIO_Init+0x196>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a48      	ldr	r2, [pc, #288]	; (800173c <HAL_GPIO_Init+0x2ac>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d101      	bne.n	8001622 <HAL_GPIO_Init+0x192>
 800161e:	2303      	movs	r3, #3
 8001620:	e006      	b.n	8001630 <HAL_GPIO_Init+0x1a0>
 8001622:	2304      	movs	r3, #4
 8001624:	e004      	b.n	8001630 <HAL_GPIO_Init+0x1a0>
 8001626:	2302      	movs	r3, #2
 8001628:	e002      	b.n	8001630 <HAL_GPIO_Init+0x1a0>
 800162a:	2301      	movs	r3, #1
 800162c:	e000      	b.n	8001630 <HAL_GPIO_Init+0x1a0>
 800162e:	2300      	movs	r3, #0
 8001630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001632:	f002 0203 	and.w	r2, r2, #3
 8001636:	0092      	lsls	r2, r2, #2
 8001638:	4093      	lsls	r3, r2
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	4313      	orrs	r3, r2
 800163e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001640:	493a      	ldr	r1, [pc, #232]	; (800172c <HAL_GPIO_Init+0x29c>)
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	089b      	lsrs	r3, r3, #2
 8001646:	3302      	adds	r3, #2
 8001648:	68fa      	ldr	r2, [r7, #12]
 800164a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d006      	beq.n	8001668 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800165a:	4b39      	ldr	r3, [pc, #228]	; (8001740 <HAL_GPIO_Init+0x2b0>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	4938      	ldr	r1, [pc, #224]	; (8001740 <HAL_GPIO_Init+0x2b0>)
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	4313      	orrs	r3, r2
 8001664:	600b      	str	r3, [r1, #0]
 8001666:	e006      	b.n	8001676 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001668:	4b35      	ldr	r3, [pc, #212]	; (8001740 <HAL_GPIO_Init+0x2b0>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	43db      	mvns	r3, r3
 8001670:	4933      	ldr	r1, [pc, #204]	; (8001740 <HAL_GPIO_Init+0x2b0>)
 8001672:	4013      	ands	r3, r2
 8001674:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d006      	beq.n	8001690 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001682:	4b2f      	ldr	r3, [pc, #188]	; (8001740 <HAL_GPIO_Init+0x2b0>)
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	492e      	ldr	r1, [pc, #184]	; (8001740 <HAL_GPIO_Init+0x2b0>)
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	4313      	orrs	r3, r2
 800168c:	604b      	str	r3, [r1, #4]
 800168e:	e006      	b.n	800169e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001690:	4b2b      	ldr	r3, [pc, #172]	; (8001740 <HAL_GPIO_Init+0x2b0>)
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	43db      	mvns	r3, r3
 8001698:	4929      	ldr	r1, [pc, #164]	; (8001740 <HAL_GPIO_Init+0x2b0>)
 800169a:	4013      	ands	r3, r2
 800169c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d006      	beq.n	80016b8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016aa:	4b25      	ldr	r3, [pc, #148]	; (8001740 <HAL_GPIO_Init+0x2b0>)
 80016ac:	689a      	ldr	r2, [r3, #8]
 80016ae:	4924      	ldr	r1, [pc, #144]	; (8001740 <HAL_GPIO_Init+0x2b0>)
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	608b      	str	r3, [r1, #8]
 80016b6:	e006      	b.n	80016c6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016b8:	4b21      	ldr	r3, [pc, #132]	; (8001740 <HAL_GPIO_Init+0x2b0>)
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	43db      	mvns	r3, r3
 80016c0:	491f      	ldr	r1, [pc, #124]	; (8001740 <HAL_GPIO_Init+0x2b0>)
 80016c2:	4013      	ands	r3, r2
 80016c4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d006      	beq.n	80016e0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016d2:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <HAL_GPIO_Init+0x2b0>)
 80016d4:	68da      	ldr	r2, [r3, #12]
 80016d6:	491a      	ldr	r1, [pc, #104]	; (8001740 <HAL_GPIO_Init+0x2b0>)
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	4313      	orrs	r3, r2
 80016dc:	60cb      	str	r3, [r1, #12]
 80016de:	e006      	b.n	80016ee <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016e0:	4b17      	ldr	r3, [pc, #92]	; (8001740 <HAL_GPIO_Init+0x2b0>)
 80016e2:	68da      	ldr	r2, [r3, #12]
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	43db      	mvns	r3, r3
 80016e8:	4915      	ldr	r1, [pc, #84]	; (8001740 <HAL_GPIO_Init+0x2b0>)
 80016ea:	4013      	ands	r3, r2
 80016ec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	3301      	adds	r3, #1
 80016f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fa:	fa22 f303 	lsr.w	r3, r2, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f47f aed0 	bne.w	80014a4 <HAL_GPIO_Init+0x14>
  }
}
 8001704:	bf00      	nop
 8001706:	372c      	adds	r7, #44	; 0x2c
 8001708:	46bd      	mov	sp, r7
 800170a:	bc80      	pop	{r7}
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	10210000 	.word	0x10210000
 8001714:	10110000 	.word	0x10110000
 8001718:	10120000 	.word	0x10120000
 800171c:	10310000 	.word	0x10310000
 8001720:	10320000 	.word	0x10320000
 8001724:	10220000 	.word	0x10220000
 8001728:	40021000 	.word	0x40021000
 800172c:	40010000 	.word	0x40010000
 8001730:	40010800 	.word	0x40010800
 8001734:	40010c00 	.word	0x40010c00
 8001738:	40011000 	.word	0x40011000
 800173c:	40011400 	.word	0x40011400
 8001740:	40010400 	.word	0x40010400

08001744 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	460b      	mov	r3, r1
 800174e:	807b      	strh	r3, [r7, #2]
 8001750:	4613      	mov	r3, r2
 8001752:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001754:	787b      	ldrb	r3, [r7, #1]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800175a:	887a      	ldrh	r2, [r7, #2]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001760:	e003      	b.n	800176a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001762:	887b      	ldrh	r3, [r7, #2]
 8001764:	041a      	lsls	r2, r3, #16
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	611a      	str	r2, [r3, #16]
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr

08001774 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e26c      	b.n	8001c60 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	2b00      	cmp	r3, #0
 8001790:	f000 8087 	beq.w	80018a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001794:	4b92      	ldr	r3, [pc, #584]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 030c 	and.w	r3, r3, #12
 800179c:	2b04      	cmp	r3, #4
 800179e:	d00c      	beq.n	80017ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017a0:	4b8f      	ldr	r3, [pc, #572]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 030c 	and.w	r3, r3, #12
 80017a8:	2b08      	cmp	r3, #8
 80017aa:	d112      	bne.n	80017d2 <HAL_RCC_OscConfig+0x5e>
 80017ac:	4b8c      	ldr	r3, [pc, #560]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017b8:	d10b      	bne.n	80017d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ba:	4b89      	ldr	r3, [pc, #548]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d06c      	beq.n	80018a0 <HAL_RCC_OscConfig+0x12c>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d168      	bne.n	80018a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e246      	b.n	8001c60 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017da:	d106      	bne.n	80017ea <HAL_RCC_OscConfig+0x76>
 80017dc:	4b80      	ldr	r3, [pc, #512]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a7f      	ldr	r2, [pc, #508]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80017e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e6:	6013      	str	r3, [r2, #0]
 80017e8:	e02e      	b.n	8001848 <HAL_RCC_OscConfig+0xd4>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d10c      	bne.n	800180c <HAL_RCC_OscConfig+0x98>
 80017f2:	4b7b      	ldr	r3, [pc, #492]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a7a      	ldr	r2, [pc, #488]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80017f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	4b78      	ldr	r3, [pc, #480]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a77      	ldr	r2, [pc, #476]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001804:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001808:	6013      	str	r3, [r2, #0]
 800180a:	e01d      	b.n	8001848 <HAL_RCC_OscConfig+0xd4>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001814:	d10c      	bne.n	8001830 <HAL_RCC_OscConfig+0xbc>
 8001816:	4b72      	ldr	r3, [pc, #456]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a71      	ldr	r2, [pc, #452]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 800181c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	4b6f      	ldr	r3, [pc, #444]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a6e      	ldr	r2, [pc, #440]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	e00b      	b.n	8001848 <HAL_RCC_OscConfig+0xd4>
 8001830:	4b6b      	ldr	r3, [pc, #428]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a6a      	ldr	r2, [pc, #424]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800183a:	6013      	str	r3, [r2, #0]
 800183c:	4b68      	ldr	r3, [pc, #416]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a67      	ldr	r2, [pc, #412]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001842:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001846:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d013      	beq.n	8001878 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001850:	f7fe fca4 	bl	800019c <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001858:	f7fe fca0 	bl	800019c <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b64      	cmp	r3, #100	; 0x64
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e1fa      	b.n	8001c60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800186a:	4b5d      	ldr	r3, [pc, #372]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f0      	beq.n	8001858 <HAL_RCC_OscConfig+0xe4>
 8001876:	e014      	b.n	80018a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001878:	f7fe fc90 	bl	800019c <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001880:	f7fe fc8c 	bl	800019c <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b64      	cmp	r3, #100	; 0x64
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e1e6      	b.n	8001c60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001892:	4b53      	ldr	r3, [pc, #332]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f0      	bne.n	8001880 <HAL_RCC_OscConfig+0x10c>
 800189e:	e000      	b.n	80018a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d063      	beq.n	8001976 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018ae:	4b4c      	ldr	r3, [pc, #304]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 030c 	and.w	r3, r3, #12
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00b      	beq.n	80018d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018ba:	4b49      	ldr	r3, [pc, #292]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 030c 	and.w	r3, r3, #12
 80018c2:	2b08      	cmp	r3, #8
 80018c4:	d11c      	bne.n	8001900 <HAL_RCC_OscConfig+0x18c>
 80018c6:	4b46      	ldr	r3, [pc, #280]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d116      	bne.n	8001900 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018d2:	4b43      	ldr	r3, [pc, #268]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d005      	beq.n	80018ea <HAL_RCC_OscConfig+0x176>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d001      	beq.n	80018ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e1ba      	b.n	8001c60 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ea:	4b3d      	ldr	r3, [pc, #244]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	4939      	ldr	r1, [pc, #228]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018fe:	e03a      	b.n	8001976 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d020      	beq.n	800194a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001908:	4b36      	ldr	r3, [pc, #216]	; (80019e4 <HAL_RCC_OscConfig+0x270>)
 800190a:	2201      	movs	r2, #1
 800190c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190e:	f7fe fc45 	bl	800019c <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001916:	f7fe fc41 	bl	800019c <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e19b      	b.n	8001c60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001928:	4b2d      	ldr	r3, [pc, #180]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0f0      	beq.n	8001916 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001934:	4b2a      	ldr	r3, [pc, #168]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	4927      	ldr	r1, [pc, #156]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001944:	4313      	orrs	r3, r2
 8001946:	600b      	str	r3, [r1, #0]
 8001948:	e015      	b.n	8001976 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800194a:	4b26      	ldr	r3, [pc, #152]	; (80019e4 <HAL_RCC_OscConfig+0x270>)
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001950:	f7fe fc24 	bl	800019c <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001958:	f7fe fc20 	bl	800019c <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e17a      	b.n	8001c60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800196a:	4b1d      	ldr	r3, [pc, #116]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f0      	bne.n	8001958 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0308 	and.w	r3, r3, #8
 800197e:	2b00      	cmp	r3, #0
 8001980:	d03a      	beq.n	80019f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d019      	beq.n	80019be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800198a:	4b17      	ldr	r3, [pc, #92]	; (80019e8 <HAL_RCC_OscConfig+0x274>)
 800198c:	2201      	movs	r2, #1
 800198e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001990:	f7fe fc04 	bl	800019c <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001998:	f7fe fc00 	bl	800019c <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e15a      	b.n	8001c60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019aa:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f0      	beq.n	8001998 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019b6:	2001      	movs	r0, #1
 80019b8:	f000 faf6 	bl	8001fa8 <RCC_Delay>
 80019bc:	e01c      	b.n	80019f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019be:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <HAL_RCC_OscConfig+0x274>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c4:	f7fe fbea 	bl	800019c <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ca:	e00f      	b.n	80019ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019cc:	f7fe fbe6 	bl	800019c <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d908      	bls.n	80019ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e140      	b.n	8001c60 <HAL_RCC_OscConfig+0x4ec>
 80019de:	bf00      	nop
 80019e0:	40021000 	.word	0x40021000
 80019e4:	42420000 	.word	0x42420000
 80019e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ec:	4b9e      	ldr	r3, [pc, #632]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 80019ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1e9      	bne.n	80019cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f000 80a6 	beq.w	8001b52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a06:	2300      	movs	r3, #0
 8001a08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a0a:	4b97      	ldr	r3, [pc, #604]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10d      	bne.n	8001a32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a16:	4b94      	ldr	r3, [pc, #592]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	4a93      	ldr	r2, [pc, #588]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a20:	61d3      	str	r3, [r2, #28]
 8001a22:	4b91      	ldr	r3, [pc, #580]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a32:	4b8e      	ldr	r3, [pc, #568]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d118      	bne.n	8001a70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a3e:	4b8b      	ldr	r3, [pc, #556]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a8a      	ldr	r2, [pc, #552]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a4a:	f7fe fba7 	bl	800019c <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a52:	f7fe fba3 	bl	800019c <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b64      	cmp	r3, #100	; 0x64
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e0fd      	b.n	8001c60 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a64:	4b81      	ldr	r3, [pc, #516]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0f0      	beq.n	8001a52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d106      	bne.n	8001a86 <HAL_RCC_OscConfig+0x312>
 8001a78:	4b7b      	ldr	r3, [pc, #492]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	4a7a      	ldr	r2, [pc, #488]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001a7e:	f043 0301 	orr.w	r3, r3, #1
 8001a82:	6213      	str	r3, [r2, #32]
 8001a84:	e02d      	b.n	8001ae2 <HAL_RCC_OscConfig+0x36e>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d10c      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x334>
 8001a8e:	4b76      	ldr	r3, [pc, #472]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	4a75      	ldr	r2, [pc, #468]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001a94:	f023 0301 	bic.w	r3, r3, #1
 8001a98:	6213      	str	r3, [r2, #32]
 8001a9a:	4b73      	ldr	r3, [pc, #460]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001a9c:	6a1b      	ldr	r3, [r3, #32]
 8001a9e:	4a72      	ldr	r2, [pc, #456]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001aa0:	f023 0304 	bic.w	r3, r3, #4
 8001aa4:	6213      	str	r3, [r2, #32]
 8001aa6:	e01c      	b.n	8001ae2 <HAL_RCC_OscConfig+0x36e>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	2b05      	cmp	r3, #5
 8001aae:	d10c      	bne.n	8001aca <HAL_RCC_OscConfig+0x356>
 8001ab0:	4b6d      	ldr	r3, [pc, #436]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	4a6c      	ldr	r2, [pc, #432]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001ab6:	f043 0304 	orr.w	r3, r3, #4
 8001aba:	6213      	str	r3, [r2, #32]
 8001abc:	4b6a      	ldr	r3, [pc, #424]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	4a69      	ldr	r2, [pc, #420]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	6213      	str	r3, [r2, #32]
 8001ac8:	e00b      	b.n	8001ae2 <HAL_RCC_OscConfig+0x36e>
 8001aca:	4b67      	ldr	r3, [pc, #412]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	4a66      	ldr	r2, [pc, #408]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001ad0:	f023 0301 	bic.w	r3, r3, #1
 8001ad4:	6213      	str	r3, [r2, #32]
 8001ad6:	4b64      	ldr	r3, [pc, #400]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	4a63      	ldr	r2, [pc, #396]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001adc:	f023 0304 	bic.w	r3, r3, #4
 8001ae0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d015      	beq.n	8001b16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aea:	f7fe fb57 	bl	800019c <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af0:	e00a      	b.n	8001b08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af2:	f7fe fb53 	bl	800019c <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e0ab      	b.n	8001c60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b08:	4b57      	ldr	r3, [pc, #348]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001b0a:	6a1b      	ldr	r3, [r3, #32]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0ee      	beq.n	8001af2 <HAL_RCC_OscConfig+0x37e>
 8001b14:	e014      	b.n	8001b40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b16:	f7fe fb41 	bl	800019c <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b1c:	e00a      	b.n	8001b34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b1e:	f7fe fb3d 	bl	800019c <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e095      	b.n	8001c60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b34:	4b4c      	ldr	r3, [pc, #304]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1ee      	bne.n	8001b1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b40:	7dfb      	ldrb	r3, [r7, #23]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d105      	bne.n	8001b52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b46:	4b48      	ldr	r3, [pc, #288]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	4a47      	ldr	r2, [pc, #284]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001b4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 8081 	beq.w	8001c5e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b5c:	4b42      	ldr	r3, [pc, #264]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 030c 	and.w	r3, r3, #12
 8001b64:	2b08      	cmp	r3, #8
 8001b66:	d061      	beq.n	8001c2c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d146      	bne.n	8001bfe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b70:	4b3f      	ldr	r3, [pc, #252]	; (8001c70 <HAL_RCC_OscConfig+0x4fc>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b76:	f7fe fb11 	bl	800019c <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b7e:	f7fe fb0d 	bl	800019c <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e067      	b.n	8001c60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b90:	4b35      	ldr	r3, [pc, #212]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1f0      	bne.n	8001b7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba4:	d108      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ba6:	4b30      	ldr	r3, [pc, #192]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	492d      	ldr	r1, [pc, #180]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bb8:	4b2b      	ldr	r3, [pc, #172]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a19      	ldr	r1, [r3, #32]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	430b      	orrs	r3, r1
 8001bca:	4927      	ldr	r1, [pc, #156]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bd0:	4b27      	ldr	r3, [pc, #156]	; (8001c70 <HAL_RCC_OscConfig+0x4fc>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd6:	f7fe fae1 	bl	800019c <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bdc:	e008      	b.n	8001bf0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bde:	f7fe fadd 	bl	800019c <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e037      	b.n	8001c60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bf0:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d0f0      	beq.n	8001bde <HAL_RCC_OscConfig+0x46a>
 8001bfc:	e02f      	b.n	8001c5e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfe:	4b1c      	ldr	r3, [pc, #112]	; (8001c70 <HAL_RCC_OscConfig+0x4fc>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c04:	f7fe faca 	bl	800019c <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c0c:	f7fe fac6 	bl	800019c <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e020      	b.n	8001c60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c1e:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f0      	bne.n	8001c0c <HAL_RCC_OscConfig+0x498>
 8001c2a:	e018      	b.n	8001c5e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	69db      	ldr	r3, [r3, #28]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d101      	bne.n	8001c38 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e013      	b.n	8001c60 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c38:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d106      	bne.n	8001c5a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d001      	beq.n	8001c5e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	40007000 	.word	0x40007000
 8001c70:	42420060 	.word	0x42420060

08001c74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e0d0      	b.n	8001e2a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c88:	4b6a      	ldr	r3, [pc, #424]	; (8001e34 <HAL_RCC_ClockConfig+0x1c0>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d910      	bls.n	8001cb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c96:	4b67      	ldr	r3, [pc, #412]	; (8001e34 <HAL_RCC_ClockConfig+0x1c0>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f023 0207 	bic.w	r2, r3, #7
 8001c9e:	4965      	ldr	r1, [pc, #404]	; (8001e34 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca6:	4b63      	ldr	r3, [pc, #396]	; (8001e34 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d001      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e0b8      	b.n	8001e2a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d020      	beq.n	8001d06 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d005      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cd0:	4b59      	ldr	r3, [pc, #356]	; (8001e38 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	4a58      	ldr	r2, [pc, #352]	; (8001e38 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cda:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0308 	and.w	r3, r3, #8
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d005      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ce8:	4b53      	ldr	r3, [pc, #332]	; (8001e38 <HAL_RCC_ClockConfig+0x1c4>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	4a52      	ldr	r2, [pc, #328]	; (8001e38 <HAL_RCC_ClockConfig+0x1c4>)
 8001cee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001cf2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cf4:	4b50      	ldr	r3, [pc, #320]	; (8001e38 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	494d      	ldr	r1, [pc, #308]	; (8001e38 <HAL_RCC_ClockConfig+0x1c4>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d040      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d107      	bne.n	8001d2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1a:	4b47      	ldr	r3, [pc, #284]	; (8001e38 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d115      	bne.n	8001d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e07f      	b.n	8001e2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d107      	bne.n	8001d42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d32:	4b41      	ldr	r3, [pc, #260]	; (8001e38 <HAL_RCC_ClockConfig+0x1c4>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d109      	bne.n	8001d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e073      	b.n	8001e2a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d42:	4b3d      	ldr	r3, [pc, #244]	; (8001e38 <HAL_RCC_ClockConfig+0x1c4>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e06b      	b.n	8001e2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d52:	4b39      	ldr	r3, [pc, #228]	; (8001e38 <HAL_RCC_ClockConfig+0x1c4>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f023 0203 	bic.w	r2, r3, #3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	4936      	ldr	r1, [pc, #216]	; (8001e38 <HAL_RCC_ClockConfig+0x1c4>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d64:	f7fe fa1a 	bl	800019c <HAL_GetTick>
 8001d68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d6a:	e00a      	b.n	8001d82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d6c:	f7fe fa16 	bl	800019c <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e053      	b.n	8001e2a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d82:	4b2d      	ldr	r3, [pc, #180]	; (8001e38 <HAL_RCC_ClockConfig+0x1c4>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f003 020c 	and.w	r2, r3, #12
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d1eb      	bne.n	8001d6c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d94:	4b27      	ldr	r3, [pc, #156]	; (8001e34 <HAL_RCC_ClockConfig+0x1c0>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d210      	bcs.n	8001dc4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da2:	4b24      	ldr	r3, [pc, #144]	; (8001e34 <HAL_RCC_ClockConfig+0x1c0>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f023 0207 	bic.w	r2, r3, #7
 8001daa:	4922      	ldr	r1, [pc, #136]	; (8001e34 <HAL_RCC_ClockConfig+0x1c0>)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db2:	4b20      	ldr	r3, [pc, #128]	; (8001e34 <HAL_RCC_ClockConfig+0x1c0>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d001      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e032      	b.n	8001e2a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d008      	beq.n	8001de2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dd0:	4b19      	ldr	r3, [pc, #100]	; (8001e38 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	4916      	ldr	r1, [pc, #88]	; (8001e38 <HAL_RCC_ClockConfig+0x1c4>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0308 	and.w	r3, r3, #8
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d009      	beq.n	8001e02 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dee:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <HAL_RCC_ClockConfig+0x1c4>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	490e      	ldr	r1, [pc, #56]	; (8001e38 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e02:	f000 f821 	bl	8001e48 <HAL_RCC_GetSysClockFreq>
 8001e06:	4601      	mov	r1, r0
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	091b      	lsrs	r3, r3, #4
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	4a0a      	ldr	r2, [pc, #40]	; (8001e3c <HAL_RCC_ClockConfig+0x1c8>)
 8001e14:	5cd3      	ldrb	r3, [r2, r3]
 8001e16:	fa21 f303 	lsr.w	r3, r1, r3
 8001e1a:	4a09      	ldr	r2, [pc, #36]	; (8001e40 <HAL_RCC_ClockConfig+0x1cc>)
 8001e1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e1e:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <HAL_RCC_ClockConfig+0x1d0>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f001 f8d6 	bl	8002fd4 <HAL_InitTick>

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40022000 	.word	0x40022000
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	08003248 	.word	0x08003248
 8001e40:	2000000c 	.word	0x2000000c
 8001e44:	20000000 	.word	0x20000000

08001e48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e48:	b490      	push	{r4, r7}
 8001e4a:	b08a      	sub	sp, #40	; 0x28
 8001e4c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e4e:	4b2a      	ldr	r3, [pc, #168]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e50:	1d3c      	adds	r4, r7, #4
 8001e52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e58:	4b28      	ldr	r3, [pc, #160]	; (8001efc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]
 8001e62:	2300      	movs	r3, #0
 8001e64:	61bb      	str	r3, [r7, #24]
 8001e66:	2300      	movs	r3, #0
 8001e68:	627b      	str	r3, [r7, #36]	; 0x24
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e72:	4b23      	ldr	r3, [pc, #140]	; (8001f00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	f003 030c 	and.w	r3, r3, #12
 8001e7e:	2b04      	cmp	r3, #4
 8001e80:	d002      	beq.n	8001e88 <HAL_RCC_GetSysClockFreq+0x40>
 8001e82:	2b08      	cmp	r3, #8
 8001e84:	d003      	beq.n	8001e8e <HAL_RCC_GetSysClockFreq+0x46>
 8001e86:	e02d      	b.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e88:	4b1e      	ldr	r3, [pc, #120]	; (8001f04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e8a:	623b      	str	r3, [r7, #32]
      break;
 8001e8c:	e02d      	b.n	8001eea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	0c9b      	lsrs	r3, r3, #18
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e9a:	4413      	add	r3, r2
 8001e9c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ea0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d013      	beq.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001eac:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	0c5b      	lsrs	r3, r3, #17
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001eba:	4413      	add	r3, r2
 8001ebc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ec0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	4a0f      	ldr	r2, [pc, #60]	; (8001f04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ec6:	fb02 f203 	mul.w	r2, r2, r3
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ed2:	e004      	b.n	8001ede <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	4a0c      	ldr	r2, [pc, #48]	; (8001f08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ed8:	fb02 f303 	mul.w	r3, r2, r3
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	623b      	str	r3, [r7, #32]
      break;
 8001ee2:	e002      	b.n	8001eea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ee4:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ee6:	623b      	str	r3, [r7, #32]
      break;
 8001ee8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eea:	6a3b      	ldr	r3, [r7, #32]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3728      	adds	r7, #40	; 0x28
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bc90      	pop	{r4, r7}
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	08003220 	.word	0x08003220
 8001efc:	08003230 	.word	0x08003230
 8001f00:	40021000 	.word	0x40021000
 8001f04:	007a1200 	.word	0x007a1200
 8001f08:	003d0900 	.word	0x003d0900

08001f0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f10:	4b02      	ldr	r3, [pc, #8]	; (8001f1c <HAL_RCC_GetHCLKFreq+0x10>)
 8001f12:	681b      	ldr	r3, [r3, #0]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr
 8001f1c:	2000000c 	.word	0x2000000c

08001f20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f24:	f7ff fff2 	bl	8001f0c <HAL_RCC_GetHCLKFreq>
 8001f28:	4601      	mov	r1, r0
 8001f2a:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	0adb      	lsrs	r3, r3, #11
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	4a03      	ldr	r2, [pc, #12]	; (8001f44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f36:	5cd3      	ldrb	r3, [r2, r3]
 8001f38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40021000 	.word	0x40021000
 8001f44:	08003258 	.word	0x08003258

08001f48 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	220f      	movs	r2, #15
 8001f56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f58:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <HAL_RCC_GetClockConfig+0x58>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 0203 	and.w	r2, r3, #3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f64:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <HAL_RCC_GetClockConfig+0x58>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f70:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <HAL_RCC_GetClockConfig+0x58>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001f7c:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <HAL_RCC_GetClockConfig+0x58>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	08db      	lsrs	r3, r3, #3
 8001f82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f8a:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <HAL_RCC_GetClockConfig+0x5c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0207 	and.w	r2, r3, #7
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	40022000 	.word	0x40022000

08001fa8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fb0:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <RCC_Delay+0x34>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a0a      	ldr	r2, [pc, #40]	; (8001fe0 <RCC_Delay+0x38>)
 8001fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fba:	0a5b      	lsrs	r3, r3, #9
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	fb02 f303 	mul.w	r3, r2, r3
 8001fc2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fc4:	bf00      	nop
  }
  while (Delay --);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	1e5a      	subs	r2, r3, #1
 8001fca:	60fa      	str	r2, [r7, #12]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1f9      	bne.n	8001fc4 <RCC_Delay+0x1c>
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	2000000c 	.word	0x2000000c
 8001fe0:	10624dd3 	.word	0x10624dd3

08001fe4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	613b      	str	r3, [r7, #16]
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d07d      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002000:	2300      	movs	r3, #0
 8002002:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002004:	4b4f      	ldr	r3, [pc, #316]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d10d      	bne.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002010:	4b4c      	ldr	r3, [pc, #304]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002012:	69db      	ldr	r3, [r3, #28]
 8002014:	4a4b      	ldr	r2, [pc, #300]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800201a:	61d3      	str	r3, [r2, #28]
 800201c:	4b49      	ldr	r3, [pc, #292]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002024:	60bb      	str	r3, [r7, #8]
 8002026:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002028:	2301      	movs	r3, #1
 800202a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800202c:	4b46      	ldr	r3, [pc, #280]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002034:	2b00      	cmp	r3, #0
 8002036:	d118      	bne.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002038:	4b43      	ldr	r3, [pc, #268]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a42      	ldr	r2, [pc, #264]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800203e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002042:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002044:	f7fe f8aa 	bl	800019c <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204a:	e008      	b.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800204c:	f7fe f8a6 	bl	800019c <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b64      	cmp	r3, #100	; 0x64
 8002058:	d901      	bls.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e06d      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800205e:	4b3a      	ldr	r3, [pc, #232]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0f0      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800206a:	4b36      	ldr	r3, [pc, #216]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002072:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d02e      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	429a      	cmp	r2, r3
 8002086:	d027      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002088:	4b2e      	ldr	r3, [pc, #184]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002090:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002092:	4b2e      	ldr	r3, [pc, #184]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002094:	2201      	movs	r2, #1
 8002096:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002098:	4b2c      	ldr	r3, [pc, #176]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800209e:	4a29      	ldr	r2, [pc, #164]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d014      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ae:	f7fe f875 	bl	800019c <HAL_GetTick>
 80020b2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b4:	e00a      	b.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b6:	f7fe f871 	bl	800019c <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d901      	bls.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e036      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020cc:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0ee      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020d8:	4b1a      	ldr	r3, [pc, #104]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	4917      	ldr	r1, [pc, #92]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020ea:	7dfb      	ldrb	r3, [r7, #23]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d105      	bne.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020f0:	4b14      	ldr	r3, [pc, #80]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020f2:	69db      	ldr	r3, [r3, #28]
 80020f4:	4a13      	ldr	r2, [pc, #76]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d008      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002108:	4b0e      	ldr	r3, [pc, #56]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	490b      	ldr	r1, [pc, #44]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002116:	4313      	orrs	r3, r2
 8002118:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0310 	and.w	r3, r3, #16
 8002122:	2b00      	cmp	r3, #0
 8002124:	d008      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002126:	4b07      	ldr	r3, [pc, #28]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	4904      	ldr	r1, [pc, #16]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002134:	4313      	orrs	r3, r2
 8002136:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40021000 	.word	0x40021000
 8002148:	40007000 	.word	0x40007000
 800214c:	42420440 	.word	0x42420440

08002150 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002150:	b590      	push	{r4, r7, lr}
 8002152:	b08d      	sub	sp, #52	; 0x34
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002158:	4b55      	ldr	r3, [pc, #340]	; (80022b0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800215a:	f107 040c 	add.w	r4, r7, #12
 800215e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002160:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002164:	4b53      	ldr	r3, [pc, #332]	; (80022b4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002166:	881b      	ldrh	r3, [r3, #0]
 8002168:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800216a:	2300      	movs	r3, #0
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
 800216e:	2300      	movs	r3, #0
 8002170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002172:	2300      	movs	r3, #0
 8002174:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002176:	2300      	movs	r3, #0
 8002178:	61fb      	str	r3, [r7, #28]
 800217a:	2300      	movs	r3, #0
 800217c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b02      	cmp	r3, #2
 8002182:	d07f      	beq.n	8002284 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8002184:	2b10      	cmp	r3, #16
 8002186:	d002      	beq.n	800218e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8002188:	2b01      	cmp	r3, #1
 800218a:	d048      	beq.n	800221e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800218c:	e08b      	b.n	80022a6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 800218e:	4b4a      	ldr	r3, [pc, #296]	; (80022b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002194:	4b48      	ldr	r3, [pc, #288]	; (80022b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d07f      	beq.n	80022a0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	0c9b      	lsrs	r3, r3, #18
 80021a4:	f003 030f 	and.w	r3, r3, #15
 80021a8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80021ac:	4413      	add	r3, r2
 80021ae:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80021b2:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d018      	beq.n	80021f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021be:	4b3e      	ldr	r3, [pc, #248]	; (80022b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	0c5b      	lsrs	r3, r3, #17
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80021cc:	4413      	add	r3, r2
 80021ce:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021d2:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00d      	beq.n	80021fa <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80021de:	4a37      	ldr	r2, [pc, #220]	; (80022bc <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80021e6:	6a3b      	ldr	r3, [r7, #32]
 80021e8:	fb02 f303 	mul.w	r3, r2, r3
 80021ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021ee:	e004      	b.n	80021fa <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021f0:	6a3b      	ldr	r3, [r7, #32]
 80021f2:	4a33      	ldr	r2, [pc, #204]	; (80022c0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80021f4:	fb02 f303 	mul.w	r3, r2, r3
 80021f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80021fa:	4b2f      	ldr	r3, [pc, #188]	; (80022b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002202:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002206:	d102      	bne.n	800220e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8002208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800220a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800220c:	e048      	b.n	80022a0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800220e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	4a2c      	ldr	r2, [pc, #176]	; (80022c4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002214:	fba2 2303 	umull	r2, r3, r2, r3
 8002218:	085b      	lsrs	r3, r3, #1
 800221a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800221c:	e040      	b.n	80022a0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800221e:	4b26      	ldr	r3, [pc, #152]	; (80022b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800222a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800222e:	d108      	bne.n	8002242 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 800223a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800223e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002240:	e01f      	b.n	8002282 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800224c:	d109      	bne.n	8002262 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800224e:	4b1a      	ldr	r3, [pc, #104]	; (80022b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 800225a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800225e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002260:	e00f      	b.n	8002282 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002268:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800226c:	d11a      	bne.n	80022a4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800226e:	4b12      	ldr	r3, [pc, #72]	; (80022b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d014      	beq.n	80022a4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 800227a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800227e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002280:	e010      	b.n	80022a4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002282:	e00f      	b.n	80022a4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002284:	f7ff fe4c 	bl	8001f20 <HAL_RCC_GetPCLK2Freq>
 8002288:	4602      	mov	r2, r0
 800228a:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	0b9b      	lsrs	r3, r3, #14
 8002290:	f003 0303 	and.w	r3, r3, #3
 8002294:	3301      	adds	r3, #1
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	fbb2 f3f3 	udiv	r3, r2, r3
 800229c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800229e:	e002      	b.n	80022a6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80022a0:	bf00      	nop
 80022a2:	e000      	b.n	80022a6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80022a4:	bf00      	nop
    }
  }
  return (frequency);
 80022a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3734      	adds	r7, #52	; 0x34
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd90      	pop	{r4, r7, pc}
 80022b0:	08003234 	.word	0x08003234
 80022b4:	08003244 	.word	0x08003244
 80022b8:	40021000 	.word	0x40021000
 80022bc:	007a1200 	.word	0x007a1200
 80022c0:	003d0900 	.word	0x003d0900
 80022c4:	aaaaaaab 	.word	0xaaaaaaab

080022c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e01d      	b.n	8002316 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d106      	bne.n	80022f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 fe54 	bl	8002f9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2202      	movs	r2, #2
 80022f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3304      	adds	r3, #4
 8002304:	4619      	mov	r1, r3
 8002306:	4610      	mov	r0, r2
 8002308:	f000 fa10 	bl	800272c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800231e:	b480      	push	{r7}
 8002320:	b085      	sub	sp, #20
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68da      	ldr	r2, [r3, #12]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f042 0201 	orr.w	r2, r2, #1
 8002334:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2b06      	cmp	r3, #6
 8002346:	d007      	beq.n	8002358 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 0201 	orr.w	r2, r2, #1
 8002356:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3714      	adds	r7, #20
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr

08002364 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b02      	cmp	r3, #2
 8002378:	d122      	bne.n	80023c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b02      	cmp	r3, #2
 8002386:	d11b      	bne.n	80023c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f06f 0202 	mvn.w	r2, #2
 8002390:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 f9a4 	bl	80026f4 <HAL_TIM_IC_CaptureCallback>
 80023ac:	e005      	b.n	80023ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f997 	bl	80026e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 f9a6 	bl	8002706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d122      	bne.n	8002414 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b04      	cmp	r3, #4
 80023da:	d11b      	bne.n	8002414 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f06f 0204 	mvn.w	r2, #4
 80023e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2202      	movs	r2, #2
 80023ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f97a 	bl	80026f4 <HAL_TIM_IC_CaptureCallback>
 8002400:	e005      	b.n	800240e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f96d 	bl	80026e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 f97c 	bl	8002706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	f003 0308 	and.w	r3, r3, #8
 800241e:	2b08      	cmp	r3, #8
 8002420:	d122      	bne.n	8002468 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	f003 0308 	and.w	r3, r3, #8
 800242c:	2b08      	cmp	r3, #8
 800242e:	d11b      	bne.n	8002468 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f06f 0208 	mvn.w	r2, #8
 8002438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2204      	movs	r2, #4
 800243e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 f950 	bl	80026f4 <HAL_TIM_IC_CaptureCallback>
 8002454:	e005      	b.n	8002462 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f943 	bl	80026e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 f952 	bl	8002706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	f003 0310 	and.w	r3, r3, #16
 8002472:	2b10      	cmp	r3, #16
 8002474:	d122      	bne.n	80024bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	f003 0310 	and.w	r3, r3, #16
 8002480:	2b10      	cmp	r3, #16
 8002482:	d11b      	bne.n	80024bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f06f 0210 	mvn.w	r2, #16
 800248c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2208      	movs	r2, #8
 8002492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f926 	bl	80026f4 <HAL_TIM_IC_CaptureCallback>
 80024a8:	e005      	b.n	80024b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f919 	bl	80026e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 f928 	bl	8002706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d10e      	bne.n	80024e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d107      	bne.n	80024e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f06f 0201 	mvn.w	r2, #1
 80024e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 fc6c 	bl	8002dc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f2:	2b80      	cmp	r3, #128	; 0x80
 80024f4:	d10e      	bne.n	8002514 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002500:	2b80      	cmp	r3, #128	; 0x80
 8002502:	d107      	bne.n	8002514 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800250c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 fa51 	bl	80029b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800251e:	2b40      	cmp	r3, #64	; 0x40
 8002520:	d10e      	bne.n	8002540 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800252c:	2b40      	cmp	r3, #64	; 0x40
 800252e:	d107      	bne.n	8002540 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f8ec 	bl	8002718 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	f003 0320 	and.w	r3, r3, #32
 800254a:	2b20      	cmp	r3, #32
 800254c:	d10e      	bne.n	800256c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	f003 0320 	and.w	r3, r3, #32
 8002558:	2b20      	cmp	r3, #32
 800255a:	d107      	bne.n	800256c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f06f 0220 	mvn.w	r2, #32
 8002564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 fa1c 	bl	80029a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800256c:	bf00      	nop
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002584:	2b01      	cmp	r3, #1
 8002586:	d101      	bne.n	800258c <HAL_TIM_ConfigClockSource+0x18>
 8002588:	2302      	movs	r3, #2
 800258a:	e0a6      	b.n	80026da <HAL_TIM_ConfigClockSource+0x166>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2202      	movs	r2, #2
 8002598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2b40      	cmp	r3, #64	; 0x40
 80025c2:	d067      	beq.n	8002694 <HAL_TIM_ConfigClockSource+0x120>
 80025c4:	2b40      	cmp	r3, #64	; 0x40
 80025c6:	d80b      	bhi.n	80025e0 <HAL_TIM_ConfigClockSource+0x6c>
 80025c8:	2b10      	cmp	r3, #16
 80025ca:	d073      	beq.n	80026b4 <HAL_TIM_ConfigClockSource+0x140>
 80025cc:	2b10      	cmp	r3, #16
 80025ce:	d802      	bhi.n	80025d6 <HAL_TIM_ConfigClockSource+0x62>
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d06f      	beq.n	80026b4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80025d4:	e078      	b.n	80026c8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80025d6:	2b20      	cmp	r3, #32
 80025d8:	d06c      	beq.n	80026b4 <HAL_TIM_ConfigClockSource+0x140>
 80025da:	2b30      	cmp	r3, #48	; 0x30
 80025dc:	d06a      	beq.n	80026b4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80025de:	e073      	b.n	80026c8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80025e0:	2b70      	cmp	r3, #112	; 0x70
 80025e2:	d00d      	beq.n	8002600 <HAL_TIM_ConfigClockSource+0x8c>
 80025e4:	2b70      	cmp	r3, #112	; 0x70
 80025e6:	d804      	bhi.n	80025f2 <HAL_TIM_ConfigClockSource+0x7e>
 80025e8:	2b50      	cmp	r3, #80	; 0x50
 80025ea:	d033      	beq.n	8002654 <HAL_TIM_ConfigClockSource+0xe0>
 80025ec:	2b60      	cmp	r3, #96	; 0x60
 80025ee:	d041      	beq.n	8002674 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80025f0:	e06a      	b.n	80026c8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80025f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025f6:	d066      	beq.n	80026c6 <HAL_TIM_ConfigClockSource+0x152>
 80025f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025fc:	d017      	beq.n	800262e <HAL_TIM_ConfigClockSource+0xba>
      break;
 80025fe:	e063      	b.n	80026c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6818      	ldr	r0, [r3, #0]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	6899      	ldr	r1, [r3, #8]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685a      	ldr	r2, [r3, #4]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	f000 f965 	bl	80028de <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002622:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	609a      	str	r2, [r3, #8]
      break;
 800262c:	e04c      	b.n	80026c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6818      	ldr	r0, [r3, #0]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	6899      	ldr	r1, [r3, #8]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	f000 f94e 	bl	80028de <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002650:	609a      	str	r2, [r3, #8]
      break;
 8002652:	e039      	b.n	80026c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6818      	ldr	r0, [r3, #0]
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	6859      	ldr	r1, [r3, #4]
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	461a      	mov	r2, r3
 8002662:	f000 f8c5 	bl	80027f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2150      	movs	r1, #80	; 0x50
 800266c:	4618      	mov	r0, r3
 800266e:	f000 f91c 	bl	80028aa <TIM_ITRx_SetConfig>
      break;
 8002672:	e029      	b.n	80026c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6818      	ldr	r0, [r3, #0]
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	6859      	ldr	r1, [r3, #4]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	461a      	mov	r2, r3
 8002682:	f000 f8e3 	bl	800284c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2160      	movs	r1, #96	; 0x60
 800268c:	4618      	mov	r0, r3
 800268e:	f000 f90c 	bl	80028aa <TIM_ITRx_SetConfig>
      break;
 8002692:	e019      	b.n	80026c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6818      	ldr	r0, [r3, #0]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	6859      	ldr	r1, [r3, #4]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	461a      	mov	r2, r3
 80026a2:	f000 f8a5 	bl	80027f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2140      	movs	r1, #64	; 0x40
 80026ac:	4618      	mov	r0, r3
 80026ae:	f000 f8fc 	bl	80028aa <TIM_ITRx_SetConfig>
      break;
 80026b2:	e009      	b.n	80026c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4619      	mov	r1, r3
 80026be:	4610      	mov	r0, r2
 80026c0:	f000 f8f3 	bl	80028aa <TIM_ITRx_SetConfig>
      break;
 80026c4:	e000      	b.n	80026c8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80026c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr

08002706 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr

08002718 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	bc80      	pop	{r7}
 8002728:	4770      	bx	lr
	...

0800272c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a29      	ldr	r2, [pc, #164]	; (80027e4 <TIM_Base_SetConfig+0xb8>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d00b      	beq.n	800275c <TIM_Base_SetConfig+0x30>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800274a:	d007      	beq.n	800275c <TIM_Base_SetConfig+0x30>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a26      	ldr	r2, [pc, #152]	; (80027e8 <TIM_Base_SetConfig+0xbc>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d003      	beq.n	800275c <TIM_Base_SetConfig+0x30>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a25      	ldr	r2, [pc, #148]	; (80027ec <TIM_Base_SetConfig+0xc0>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d108      	bne.n	800276e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002762:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	4313      	orrs	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a1c      	ldr	r2, [pc, #112]	; (80027e4 <TIM_Base_SetConfig+0xb8>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d00b      	beq.n	800278e <TIM_Base_SetConfig+0x62>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800277c:	d007      	beq.n	800278e <TIM_Base_SetConfig+0x62>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a19      	ldr	r2, [pc, #100]	; (80027e8 <TIM_Base_SetConfig+0xbc>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d003      	beq.n	800278e <TIM_Base_SetConfig+0x62>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a18      	ldr	r2, [pc, #96]	; (80027ec <TIM_Base_SetConfig+0xc0>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d108      	bne.n	80027a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002794:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	4313      	orrs	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a07      	ldr	r2, [pc, #28]	; (80027e4 <TIM_Base_SetConfig+0xb8>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d103      	bne.n	80027d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	615a      	str	r2, [r3, #20]
}
 80027da:	bf00      	nop
 80027dc:	3714      	adds	r7, #20
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr
 80027e4:	40012c00 	.word	0x40012c00
 80027e8:	40000400 	.word	0x40000400
 80027ec:	40000800 	.word	0x40000800

080027f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b087      	sub	sp, #28
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	f023 0201 	bic.w	r2, r3, #1
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800281a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	011b      	lsls	r3, r3, #4
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	4313      	orrs	r3, r2
 8002824:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	f023 030a 	bic.w	r3, r3, #10
 800282c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	4313      	orrs	r3, r2
 8002834:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	621a      	str	r2, [r3, #32]
}
 8002842:	bf00      	nop
 8002844:	371c      	adds	r7, #28
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr

0800284c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800284c:	b480      	push	{r7}
 800284e:	b087      	sub	sp, #28
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	f023 0210 	bic.w	r2, r3, #16
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002876:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	031b      	lsls	r3, r3, #12
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	4313      	orrs	r3, r2
 8002880:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002888:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	011b      	lsls	r3, r3, #4
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	4313      	orrs	r3, r2
 8002892:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	621a      	str	r2, [r3, #32]
}
 80028a0:	bf00      	nop
 80028a2:	371c      	adds	r7, #28
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr

080028aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b085      	sub	sp, #20
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
 80028b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	f043 0307 	orr.w	r3, r3, #7
 80028cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	609a      	str	r2, [r3, #8]
}
 80028d4:	bf00      	nop
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc80      	pop	{r7}
 80028dc:	4770      	bx	lr

080028de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028de:	b480      	push	{r7}
 80028e0:	b087      	sub	sp, #28
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	60f8      	str	r0, [r7, #12]
 80028e6:	60b9      	str	r1, [r7, #8]
 80028e8:	607a      	str	r2, [r7, #4]
 80028ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	021a      	lsls	r2, r3, #8
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	431a      	orrs	r2, r3
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	4313      	orrs	r3, r2
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	4313      	orrs	r3, r2
 800290a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	609a      	str	r2, [r3, #8]
}
 8002912:	bf00      	nop
 8002914:	371c      	adds	r7, #28
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr

0800291c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800292c:	2b01      	cmp	r3, #1
 800292e:	d101      	bne.n	8002934 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002930:	2302      	movs	r3, #2
 8002932:	e032      	b.n	800299a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2202      	movs	r2, #2
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800295a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	4313      	orrs	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800296c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	4313      	orrs	r3, r2
 8002976:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr

080029a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bc80      	pop	{r7}
 80029b4:	4770      	bx	lr

080029b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr

080029c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029cc:	f7fd fbbe 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029d0:	f000 f850 	bl	8002a74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029d4:	f000 f96a 	bl	8002cac <MX_GPIO_Init>
  MX_CAN_Init();
 80029d8:	f000 f8e6 	bl	8002ba8 <MX_CAN_Init>
  MX_ADC1_Init();
 80029dc:	f000 f8a6 	bl	8002b2c <MX_ADC1_Init>
  MX_TIM2_Init();
 80029e0:	f000 f918 	bl	8002c14 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  CAN_filterConfig();
 80029e4:	f000 f9ba 	bl	8002d5c <CAN_filterConfig>
  HAL_ADC_Start(&hadc1);
 80029e8:	481c      	ldr	r0, [pc, #112]	; (8002a5c <main+0x94>)
 80029ea:	f7fd fcb9 	bl	8000360 <HAL_ADC_Start>
  HAL_CAN_Start(&hcan);
 80029ee:	481c      	ldr	r0, [pc, #112]	; (8002a60 <main+0x98>)
 80029f0:	f7fe f9de 	bl	8000db0 <HAL_CAN_Start>

  TxHeader.DLC = 1;
 80029f4:	4b1b      	ldr	r3, [pc, #108]	; (8002a64 <main+0x9c>)
 80029f6:	2201      	movs	r2, #1
 80029f8:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 80029fa:	4b1a      	ldr	r3, [pc, #104]	; (8002a64 <main+0x9c>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	609a      	str	r2, [r3, #8]
  TxHeader.StdId = myID;
 8002a00:	4b19      	ldr	r3, [pc, #100]	; (8002a68 <main+0xa0>)
 8002a02:	881b      	ldrh	r3, [r3, #0]
 8002a04:	461a      	mov	r2, r3
 8002a06:	4b17      	ldr	r3, [pc, #92]	; (8002a64 <main+0x9c>)
 8002a08:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 8002a0a:	4b16      	ldr	r3, [pc, #88]	; (8002a64 <main+0x9c>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	60da      	str	r2, [r3, #12]

  //start listening for CAN traffic with interrupts
  if(HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 8002a10:	2110      	movs	r1, #16
 8002a12:	4813      	ldr	r0, [pc, #76]	; (8002a60 <main+0x98>)
 8002a14:	f7fe fa10 	bl	8000e38 <HAL_CAN_ActivateNotification>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <main+0x5a>
  {
	  Error_Handler();
 8002a1e:	f000 f9e1 	bl	8002de4 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 8002a22:	480e      	ldr	r0, [pc, #56]	; (8002a5c <main+0x94>)
 8002a24:	f7fd fc9c 	bl	8000360 <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc1, 5) != HAL_OK)
 8002a28:	2105      	movs	r1, #5
 8002a2a:	480c      	ldr	r0, [pc, #48]	; (8002a5c <main+0x94>)
 8002a2c:	f7fd fd72 	bl	8000514 <HAL_ADC_PollForConversion>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <main+0x72>
	  {
		  Error_Handler();
 8002a36:	f000 f9d5 	bl	8002de4 <Error_Handler>
	  }
	  potValue = HAL_ADC_GetValue(&hadc1);
 8002a3a:	4808      	ldr	r0, [pc, #32]	; (8002a5c <main+0x94>)
 8002a3c:	f7fd fe64 	bl	8000708 <HAL_ADC_GetValue>
 8002a40:	4603      	mov	r3, r0
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <main+0xa4>)
 8002a46:	701a      	strb	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 8002a48:	4804      	ldr	r0, [pc, #16]	; (8002a5c <main+0x94>)
 8002a4a:	f7fd fd37 	bl	80004bc <HAL_ADC_Stop>
	  {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
	  }
	  if(potValue < 2048)
	  {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a54:	4806      	ldr	r0, [pc, #24]	; (8002a70 <main+0xa8>)
 8002a56:	f7fe fe75 	bl	8001744 <HAL_GPIO_WritePin>
	  HAL_ADC_Start(&hadc1);
 8002a5a:	e7e2      	b.n	8002a22 <main+0x5a>
 8002a5c:	20000080 	.word	0x20000080
 8002a60:	20000058 	.word	0x20000058
 8002a64:	200000f8 	.word	0x200000f8
 8002a68:	20000006 	.word	0x20000006
 8002a6c:	200000b0 	.word	0x200000b0
 8002a70:	40011000 	.word	0x40011000

08002a74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b094      	sub	sp, #80	; 0x50
 8002a78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a7e:	2228      	movs	r2, #40	; 0x28
 8002a80:	2100      	movs	r1, #0
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 fbb8 	bl	80031f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a88:	f107 0314 	add.w	r3, r7, #20
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	605a      	str	r2, [r3, #4]
 8002a92:	609a      	str	r2, [r3, #8]
 8002a94:	60da      	str	r2, [r3, #12]
 8002a96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a98:	1d3b      	adds	r3, r7, #4
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	605a      	str	r2, [r3, #4]
 8002aa0:	609a      	str	r2, [r3, #8]
 8002aa2:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002aa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002aba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002abe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002ac0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002ac4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ac6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fe fe52 	bl	8001774 <HAL_RCC_OscConfig>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002ad6:	f000 f985 	bl	8002de4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ada:	230f      	movs	r3, #15
 8002adc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ade:	2302      	movs	r3, #2
 8002ae0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ae6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aea:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002aec:	2300      	movs	r3, #0
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002af0:	f107 0314 	add.w	r3, r7, #20
 8002af4:	2102      	movs	r1, #2
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff f8bc 	bl	8001c74 <HAL_RCC_ClockConfig>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002b02:	f000 f96f 	bl	8002de4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002b06:	2302      	movs	r3, #2
 8002b08:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002b0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b0e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b10:	1d3b      	adds	r3, r7, #4
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff fa66 	bl	8001fe4 <HAL_RCCEx_PeriphCLKConfig>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002b1e:	f000 f961 	bl	8002de4 <Error_Handler>
  }
}
 8002b22:	bf00      	nop
 8002b24:	3750      	adds	r7, #80	; 0x50
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
	...

08002b2c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002b32:	1d3b      	adds	r3, r7, #4
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8002b3c:	4b18      	ldr	r3, [pc, #96]	; (8002ba0 <MX_ADC1_Init+0x74>)
 8002b3e:	4a19      	ldr	r2, [pc, #100]	; (8002ba4 <MX_ADC1_Init+0x78>)
 8002b40:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002b42:	4b17      	ldr	r3, [pc, #92]	; (8002ba0 <MX_ADC1_Init+0x74>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002b48:	4b15      	ldr	r3, [pc, #84]	; (8002ba0 <MX_ADC1_Init+0x74>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b4e:	4b14      	ldr	r3, [pc, #80]	; (8002ba0 <MX_ADC1_Init+0x74>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b54:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <MX_ADC1_Init+0x74>)
 8002b56:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002b5a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b5c:	4b10      	ldr	r3, [pc, #64]	; (8002ba0 <MX_ADC1_Init+0x74>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002b62:	4b0f      	ldr	r3, [pc, #60]	; (8002ba0 <MX_ADC1_Init+0x74>)
 8002b64:	2201      	movs	r2, #1
 8002b66:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b68:	480d      	ldr	r0, [pc, #52]	; (8002ba0 <MX_ADC1_Init+0x74>)
 8002b6a:	f7fd fb21 	bl	80001b0 <HAL_ADC_Init>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002b74:	f000 f936 	bl	8002de4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002b78:	2305      	movs	r3, #5
 8002b7a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002b80:	2300      	movs	r3, #0
 8002b82:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b84:	1d3b      	adds	r3, r7, #4
 8002b86:	4619      	mov	r1, r3
 8002b88:	4805      	ldr	r0, [pc, #20]	; (8002ba0 <MX_ADC1_Init+0x74>)
 8002b8a:	f7fd fdc9 	bl	8000720 <HAL_ADC_ConfigChannel>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002b94:	f000 f926 	bl	8002de4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002b98:	bf00      	nop
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	20000080 	.word	0x20000080
 8002ba4:	40012400 	.word	0x40012400

08002ba8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8002bac:	4b17      	ldr	r3, [pc, #92]	; (8002c0c <MX_CAN_Init+0x64>)
 8002bae:	4a18      	ldr	r2, [pc, #96]	; (8002c10 <MX_CAN_Init+0x68>)
 8002bb0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8002bb2:	4b16      	ldr	r3, [pc, #88]	; (8002c0c <MX_CAN_Init+0x64>)
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002bb8:	4b14      	ldr	r3, [pc, #80]	; (8002c0c <MX_CAN_Init+0x64>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002bbe:	4b13      	ldr	r3, [pc, #76]	; (8002c0c <MX_CAN_Init+0x64>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8002bc4:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <MX_CAN_Init+0x64>)
 8002bc6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002bca:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002bcc:	4b0f      	ldr	r3, [pc, #60]	; (8002c0c <MX_CAN_Init+0x64>)
 8002bce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002bd2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002bd4:	4b0d      	ldr	r3, [pc, #52]	; (8002c0c <MX_CAN_Init+0x64>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8002bda:	4b0c      	ldr	r3, [pc, #48]	; (8002c0c <MX_CAN_Init+0x64>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002be0:	4b0a      	ldr	r3, [pc, #40]	; (8002c0c <MX_CAN_Init+0x64>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002be6:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <MX_CAN_Init+0x64>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002bec:	4b07      	ldr	r3, [pc, #28]	; (8002c0c <MX_CAN_Init+0x64>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002bf2:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <MX_CAN_Init+0x64>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002bf8:	4804      	ldr	r0, [pc, #16]	; (8002c0c <MX_CAN_Init+0x64>)
 8002bfa:	f7fd ff15 	bl	8000a28 <HAL_CAN_Init>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8002c04:	f000 f8ee 	bl	8002de4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8002c08:	bf00      	nop
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	20000058 	.word	0x20000058
 8002c10:	40006400 	.word	0x40006400

08002c14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c1a:	f107 0308 	add.w	r3, r7, #8
 8002c1e:	2200      	movs	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	605a      	str	r2, [r3, #4]
 8002c24:	609a      	str	r2, [r3, #8]
 8002c26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c28:	463b      	mov	r3, r7
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c30:	4b1d      	ldr	r3, [pc, #116]	; (8002ca8 <MX_TIM2_Init+0x94>)
 8002c32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002c38:	4b1b      	ldr	r3, [pc, #108]	; (8002ca8 <MX_TIM2_Init+0x94>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c3e:	4b1a      	ldr	r3, [pc, #104]	; (8002ca8 <MX_TIM2_Init+0x94>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8002c44:	4b18      	ldr	r3, [pc, #96]	; (8002ca8 <MX_TIM2_Init+0x94>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c4a:	4b17      	ldr	r3, [pc, #92]	; (8002ca8 <MX_TIM2_Init+0x94>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c50:	4b15      	ldr	r3, [pc, #84]	; (8002ca8 <MX_TIM2_Init+0x94>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c56:	4814      	ldr	r0, [pc, #80]	; (8002ca8 <MX_TIM2_Init+0x94>)
 8002c58:	f7ff fb36 	bl	80022c8 <HAL_TIM_Base_Init>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8002c62:	f000 f8bf 	bl	8002de4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c6a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c6c:	f107 0308 	add.w	r3, r7, #8
 8002c70:	4619      	mov	r1, r3
 8002c72:	480d      	ldr	r0, [pc, #52]	; (8002ca8 <MX_TIM2_Init+0x94>)
 8002c74:	f7ff fc7e 	bl	8002574 <HAL_TIM_ConfigClockSource>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8002c7e:	f000 f8b1 	bl	8002de4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c82:	2300      	movs	r3, #0
 8002c84:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c86:	2300      	movs	r3, #0
 8002c88:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c8a:	463b      	mov	r3, r7
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4806      	ldr	r0, [pc, #24]	; (8002ca8 <MX_TIM2_Init+0x94>)
 8002c90:	f7ff fe44 	bl	800291c <HAL_TIMEx_MasterConfigSynchronization>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8002c9a:	f000 f8a3 	bl	8002de4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002c9e:	bf00      	nop
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	200000b8 	.word	0x200000b8

08002cac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb2:	f107 0310 	add.w	r3, r7, #16
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	605a      	str	r2, [r3, #4]
 8002cbc:	609a      	str	r2, [r3, #8]
 8002cbe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cc0:	4b24      	ldr	r3, [pc, #144]	; (8002d54 <MX_GPIO_Init+0xa8>)
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	4a23      	ldr	r2, [pc, #140]	; (8002d54 <MX_GPIO_Init+0xa8>)
 8002cc6:	f043 0310 	orr.w	r3, r3, #16
 8002cca:	6193      	str	r3, [r2, #24]
 8002ccc:	4b21      	ldr	r3, [pc, #132]	; (8002d54 <MX_GPIO_Init+0xa8>)
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	f003 0310 	and.w	r3, r3, #16
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cd8:	4b1e      	ldr	r3, [pc, #120]	; (8002d54 <MX_GPIO_Init+0xa8>)
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	4a1d      	ldr	r2, [pc, #116]	; (8002d54 <MX_GPIO_Init+0xa8>)
 8002cde:	f043 0320 	orr.w	r3, r3, #32
 8002ce2:	6193      	str	r3, [r2, #24]
 8002ce4:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <MX_GPIO_Init+0xa8>)
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	f003 0320 	and.w	r3, r3, #32
 8002cec:	60bb      	str	r3, [r7, #8]
 8002cee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf0:	4b18      	ldr	r3, [pc, #96]	; (8002d54 <MX_GPIO_Init+0xa8>)
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	4a17      	ldr	r2, [pc, #92]	; (8002d54 <MX_GPIO_Init+0xa8>)
 8002cf6:	f043 0304 	orr.w	r3, r3, #4
 8002cfa:	6193      	str	r3, [r2, #24]
 8002cfc:	4b15      	ldr	r3, [pc, #84]	; (8002d54 <MX_GPIO_Init+0xa8>)
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	607b      	str	r3, [r7, #4]
 8002d06:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d08:	4b12      	ldr	r3, [pc, #72]	; (8002d54 <MX_GPIO_Init+0xa8>)
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	4a11      	ldr	r2, [pc, #68]	; (8002d54 <MX_GPIO_Init+0xa8>)
 8002d0e:	f043 0308 	orr.w	r3, r3, #8
 8002d12:	6193      	str	r3, [r2, #24]
 8002d14:	4b0f      	ldr	r3, [pc, #60]	; (8002d54 <MX_GPIO_Init+0xa8>)
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	f003 0308 	and.w	r3, r3, #8
 8002d1c:	603b      	str	r3, [r7, #0]
 8002d1e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002d20:	2200      	movs	r2, #0
 8002d22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d26:	480c      	ldr	r0, [pc, #48]	; (8002d58 <MX_GPIO_Init+0xac>)
 8002d28:	f7fe fd0c 	bl	8001744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002d2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d32:	2301      	movs	r3, #1
 8002d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d36:	2300      	movs	r3, #0
 8002d38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d3e:	f107 0310 	add.w	r3, r7, #16
 8002d42:	4619      	mov	r1, r3
 8002d44:	4804      	ldr	r0, [pc, #16]	; (8002d58 <MX_GPIO_Init+0xac>)
 8002d46:	f7fe fba3 	bl	8001490 <HAL_GPIO_Init>

}
 8002d4a:	bf00      	nop
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40021000 	.word	0x40021000
 8002d58:	40011000 	.word	0x40011000

08002d5c <CAN_filterConfig>:

/* USER CODE BEGIN 4 */
void CAN_filterConfig(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
	sFilterConfig.FilterActivation = ENABLE;
 8002d60:	4b14      	ldr	r3, [pc, #80]	; (8002db4 <CAN_filterConfig+0x58>)
 8002d62:	2201      	movs	r2, #1
 8002d64:	621a      	str	r2, [r3, #32]
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002d66:	4b13      	ldr	r3, [pc, #76]	; (8002db4 <CAN_filterConfig+0x58>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterIdHigh = remoteID << 5;
 8002d6c:	4b12      	ldr	r3, [pc, #72]	; (8002db8 <CAN_filterConfig+0x5c>)
 8002d6e:	881b      	ldrh	r3, [r3, #0]
 8002d70:	015b      	lsls	r3, r3, #5
 8002d72:	461a      	mov	r2, r3
 8002d74:	4b0f      	ldr	r3, [pc, #60]	; (8002db4 <CAN_filterConfig+0x58>)
 8002d76:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8002d78:	4b0e      	ldr	r3, [pc, #56]	; (8002db4 <CAN_filterConfig+0x58>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0xFFE0;
 8002d7e:	4b0d      	ldr	r3, [pc, #52]	; (8002db4 <CAN_filterConfig+0x58>)
 8002d80:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002d84:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8002d86:	4b0b      	ldr	r3, [pc, #44]	; (8002db4 <CAN_filterConfig+0x58>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002d8c:	4b09      	ldr	r3, [pc, #36]	; (8002db4 <CAN_filterConfig+0x58>)
 8002d8e:	2201      	movs	r2, #1
 8002d90:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterBank = 14;
 8002d92:	4b08      	ldr	r3, [pc, #32]	; (8002db4 <CAN_filterConfig+0x58>)
 8002d94:	220e      	movs	r2, #14
 8002d96:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002d98:	4b06      	ldr	r3, [pc, #24]	; (8002db4 <CAN_filterConfig+0x58>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	619a      	str	r2, [r3, #24]

	if(HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8002d9e:	4905      	ldr	r1, [pc, #20]	; (8002db4 <CAN_filterConfig+0x58>)
 8002da0:	4806      	ldr	r0, [pc, #24]	; (8002dbc <CAN_filterConfig+0x60>)
 8002da2:	f7fd ff3c 	bl	8000c1e <HAL_CAN_ConfigFilter>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <CAN_filterConfig+0x54>
	{
		Error_Handler();
 8002dac:	f000 f81a 	bl	8002de4 <Error_Handler>
	}
}
 8002db0:	bf00      	nop
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	20000030 	.word	0x20000030
 8002db8:	20000008 	.word	0x20000008
 8002dbc:	20000058 	.word	0x20000058

08002dc0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a04      	ldr	r2, [pc, #16]	; (8002de0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d101      	bne.n	8002dd6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002dd2:	f7fd f9d1 	bl	8000178 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002dd6:	bf00      	nop
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40012c00 	.word	0x40012c00

08002de4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002de8:	bf00      	nop
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr

08002df0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002df6:	4b15      	ldr	r3, [pc, #84]	; (8002e4c <HAL_MspInit+0x5c>)
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	4a14      	ldr	r2, [pc, #80]	; (8002e4c <HAL_MspInit+0x5c>)
 8002dfc:	f043 0301 	orr.w	r3, r3, #1
 8002e00:	6193      	str	r3, [r2, #24]
 8002e02:	4b12      	ldr	r3, [pc, #72]	; (8002e4c <HAL_MspInit+0x5c>)
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	60bb      	str	r3, [r7, #8]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e0e:	4b0f      	ldr	r3, [pc, #60]	; (8002e4c <HAL_MspInit+0x5c>)
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	4a0e      	ldr	r2, [pc, #56]	; (8002e4c <HAL_MspInit+0x5c>)
 8002e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e18:	61d3      	str	r3, [r2, #28]
 8002e1a:	4b0c      	ldr	r3, [pc, #48]	; (8002e4c <HAL_MspInit+0x5c>)
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e22:	607b      	str	r3, [r7, #4]
 8002e24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8002e26:	4b0a      	ldr	r3, [pc, #40]	; (8002e50 <HAL_MspInit+0x60>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	4a04      	ldr	r2, [pc, #16]	; (8002e50 <HAL_MspInit+0x60>)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e42:	bf00      	nop
 8002e44:	3714      	adds	r7, #20
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	40010000 	.word	0x40010000

08002e54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b088      	sub	sp, #32
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e5c:	f107 0310 	add.w	r3, r7, #16
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	605a      	str	r2, [r3, #4]
 8002e66:	609a      	str	r2, [r3, #8]
 8002e68:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a14      	ldr	r2, [pc, #80]	; (8002ec0 <HAL_ADC_MspInit+0x6c>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d121      	bne.n	8002eb8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e74:	4b13      	ldr	r3, [pc, #76]	; (8002ec4 <HAL_ADC_MspInit+0x70>)
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	4a12      	ldr	r2, [pc, #72]	; (8002ec4 <HAL_ADC_MspInit+0x70>)
 8002e7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e7e:	6193      	str	r3, [r2, #24]
 8002e80:	4b10      	ldr	r3, [pc, #64]	; (8002ec4 <HAL_ADC_MspInit+0x70>)
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e8c:	4b0d      	ldr	r3, [pc, #52]	; (8002ec4 <HAL_ADC_MspInit+0x70>)
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	4a0c      	ldr	r2, [pc, #48]	; (8002ec4 <HAL_ADC_MspInit+0x70>)
 8002e92:	f043 0304 	orr.w	r3, r3, #4
 8002e96:	6193      	str	r3, [r2, #24]
 8002e98:	4b0a      	ldr	r3, [pc, #40]	; (8002ec4 <HAL_ADC_MspInit+0x70>)
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	60bb      	str	r3, [r7, #8]
 8002ea2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002ea4:	2320      	movs	r3, #32
 8002ea6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eac:	f107 0310 	add.w	r3, r7, #16
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4805      	ldr	r0, [pc, #20]	; (8002ec8 <HAL_ADC_MspInit+0x74>)
 8002eb4:	f7fe faec 	bl	8001490 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002eb8:	bf00      	nop
 8002eba:	3720      	adds	r7, #32
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40012400 	.word	0x40012400
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	40010800 	.word	0x40010800

08002ecc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b08a      	sub	sp, #40	; 0x28
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed4:	f107 0314 	add.w	r3, r7, #20
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	605a      	str	r2, [r3, #4]
 8002ede:	609a      	str	r2, [r3, #8]
 8002ee0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a29      	ldr	r2, [pc, #164]	; (8002f8c <HAL_CAN_MspInit+0xc0>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d14b      	bne.n	8002f84 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002eec:	4b28      	ldr	r3, [pc, #160]	; (8002f90 <HAL_CAN_MspInit+0xc4>)
 8002eee:	69db      	ldr	r3, [r3, #28]
 8002ef0:	4a27      	ldr	r2, [pc, #156]	; (8002f90 <HAL_CAN_MspInit+0xc4>)
 8002ef2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ef6:	61d3      	str	r3, [r2, #28]
 8002ef8:	4b25      	ldr	r3, [pc, #148]	; (8002f90 <HAL_CAN_MspInit+0xc4>)
 8002efa:	69db      	ldr	r3, [r3, #28]
 8002efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f00:	613b      	str	r3, [r7, #16]
 8002f02:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f04:	4b22      	ldr	r3, [pc, #136]	; (8002f90 <HAL_CAN_MspInit+0xc4>)
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	4a21      	ldr	r2, [pc, #132]	; (8002f90 <HAL_CAN_MspInit+0xc4>)
 8002f0a:	f043 0308 	orr.w	r3, r3, #8
 8002f0e:	6193      	str	r3, [r2, #24]
 8002f10:	4b1f      	ldr	r3, [pc, #124]	; (8002f90 <HAL_CAN_MspInit+0xc4>)
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	f003 0308 	and.w	r3, r3, #8
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002f1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f22:	2300      	movs	r3, #0
 8002f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f26:	2300      	movs	r3, #0
 8002f28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f2a:	f107 0314 	add.w	r3, r7, #20
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4818      	ldr	r0, [pc, #96]	; (8002f94 <HAL_CAN_MspInit+0xc8>)
 8002f32:	f7fe faad 	bl	8001490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f40:	2303      	movs	r3, #3
 8002f42:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f44:	f107 0314 	add.w	r3, r7, #20
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4812      	ldr	r0, [pc, #72]	; (8002f94 <HAL_CAN_MspInit+0xc8>)
 8002f4c:	f7fe faa0 	bl	8001490 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8002f50:	4b11      	ldr	r3, [pc, #68]	; (8002f98 <HAL_CAN_MspInit+0xcc>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	627b      	str	r3, [r7, #36]	; 0x24
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8002f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002f64:	627b      	str	r3, [r7, #36]	; 0x24
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f6e:	4a0a      	ldr	r2, [pc, #40]	; (8002f98 <HAL_CAN_MspInit+0xcc>)
 8002f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f72:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8002f74:	2200      	movs	r2, #0
 8002f76:	2100      	movs	r1, #0
 8002f78:	2015      	movs	r0, #21
 8002f7a:	f7fe fa5e 	bl	800143a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002f7e:	2015      	movs	r0, #21
 8002f80:	f7fe fa77 	bl	8001472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002f84:	bf00      	nop
 8002f86:	3728      	adds	r7, #40	; 0x28
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40006400 	.word	0x40006400
 8002f90:	40021000 	.word	0x40021000
 8002f94:	40010c00 	.word	0x40010c00
 8002f98:	40010000 	.word	0x40010000

08002f9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fac:	d10b      	bne.n	8002fc6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fae:	4b08      	ldr	r3, [pc, #32]	; (8002fd0 <HAL_TIM_Base_MspInit+0x34>)
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	4a07      	ldr	r2, [pc, #28]	; (8002fd0 <HAL_TIM_Base_MspInit+0x34>)
 8002fb4:	f043 0301 	orr.w	r3, r3, #1
 8002fb8:	61d3      	str	r3, [r2, #28]
 8002fba:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <HAL_TIM_Base_MspInit+0x34>)
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002fc6:	bf00      	nop
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr
 8002fd0:	40021000 	.word	0x40021000

08002fd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b08c      	sub	sp, #48	; 0x30
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	2019      	movs	r0, #25
 8002fea:	f7fe fa26 	bl	800143a <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 8002fee:	2019      	movs	r0, #25
 8002ff0:	f7fe fa3f 	bl	8001472 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002ff4:	4b1e      	ldr	r3, [pc, #120]	; (8003070 <HAL_InitTick+0x9c>)
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	4a1d      	ldr	r2, [pc, #116]	; (8003070 <HAL_InitTick+0x9c>)
 8002ffa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ffe:	6193      	str	r3, [r2, #24]
 8003000:	4b1b      	ldr	r3, [pc, #108]	; (8003070 <HAL_InitTick+0x9c>)
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800300c:	f107 0210 	add.w	r2, r7, #16
 8003010:	f107 0314 	add.w	r3, r7, #20
 8003014:	4611      	mov	r1, r2
 8003016:	4618      	mov	r0, r3
 8003018:	f7fe ff96 	bl	8001f48 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800301c:	f7fe ff80 	bl	8001f20 <HAL_RCC_GetPCLK2Freq>
 8003020:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003024:	4a13      	ldr	r2, [pc, #76]	; (8003074 <HAL_InitTick+0xa0>)
 8003026:	fba2 2303 	umull	r2, r3, r2, r3
 800302a:	0c9b      	lsrs	r3, r3, #18
 800302c:	3b01      	subs	r3, #1
 800302e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003030:	4b11      	ldr	r3, [pc, #68]	; (8003078 <HAL_InitTick+0xa4>)
 8003032:	4a12      	ldr	r2, [pc, #72]	; (800307c <HAL_InitTick+0xa8>)
 8003034:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8003036:	4b10      	ldr	r3, [pc, #64]	; (8003078 <HAL_InitTick+0xa4>)
 8003038:	f240 32e7 	movw	r2, #999	; 0x3e7
 800303c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800303e:	4a0e      	ldr	r2, [pc, #56]	; (8003078 <HAL_InitTick+0xa4>)
 8003040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003042:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003044:	4b0c      	ldr	r3, [pc, #48]	; (8003078 <HAL_InitTick+0xa4>)
 8003046:	2200      	movs	r2, #0
 8003048:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800304a:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <HAL_InitTick+0xa4>)
 800304c:	2200      	movs	r2, #0
 800304e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003050:	4809      	ldr	r0, [pc, #36]	; (8003078 <HAL_InitTick+0xa4>)
 8003052:	f7ff f939 	bl	80022c8 <HAL_TIM_Base_Init>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d104      	bne.n	8003066 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800305c:	4806      	ldr	r0, [pc, #24]	; (8003078 <HAL_InitTick+0xa4>)
 800305e:	f7ff f95e 	bl	800231e <HAL_TIM_Base_Start_IT>
 8003062:	4603      	mov	r3, r0
 8003064:	e000      	b.n	8003068 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
}
 8003068:	4618      	mov	r0, r3
 800306a:	3730      	adds	r7, #48	; 0x30
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40021000 	.word	0x40021000
 8003074:	431bde83 	.word	0x431bde83
 8003078:	2000012c 	.word	0x2000012c
 800307c:	40012c00 	.word	0x40012c00

08003080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003084:	bf00      	nop
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr

0800308c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003090:	e7fe      	b.n	8003090 <HardFault_Handler+0x4>

08003092 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003092:	b480      	push	{r7}
 8003094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003096:	e7fe      	b.n	8003096 <MemManage_Handler+0x4>

08003098 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800309c:	e7fe      	b.n	800309c <BusFault_Handler+0x4>

0800309e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800309e:	b480      	push	{r7}
 80030a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030a2:	e7fe      	b.n	80030a2 <UsageFault_Handler+0x4>

080030a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030a8:	bf00      	nop
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bc80      	pop	{r7}
 80030ae:	4770      	bx	lr

080030b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030b4:	bf00      	nop
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr

080030bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030c0:	bf00      	nop
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr

080030c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030cc:	bf00      	nop
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr

080030d4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80030d8:	4802      	ldr	r0, [pc, #8]	; (80030e4 <CAN1_RX1_IRQHandler+0x10>)
 80030da:	f7fd fed2 	bl	8000e82 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80030de:	bf00      	nop
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	20000058 	.word	0x20000058

080030e8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80030ec:	4802      	ldr	r0, [pc, #8]	; (80030f8 <TIM1_UP_IRQHandler+0x10>)
 80030ee:	f7ff f939 	bl	8002364 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80030f2:	bf00      	nop
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	2000012c 	.word	0x2000012c

080030fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003100:	4b15      	ldr	r3, [pc, #84]	; (8003158 <SystemInit+0x5c>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a14      	ldr	r2, [pc, #80]	; (8003158 <SystemInit+0x5c>)
 8003106:	f043 0301 	orr.w	r3, r3, #1
 800310a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800310c:	4b12      	ldr	r3, [pc, #72]	; (8003158 <SystemInit+0x5c>)
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	4911      	ldr	r1, [pc, #68]	; (8003158 <SystemInit+0x5c>)
 8003112:	4b12      	ldr	r3, [pc, #72]	; (800315c <SystemInit+0x60>)
 8003114:	4013      	ands	r3, r2
 8003116:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003118:	4b0f      	ldr	r3, [pc, #60]	; (8003158 <SystemInit+0x5c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a0e      	ldr	r2, [pc, #56]	; (8003158 <SystemInit+0x5c>)
 800311e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003126:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003128:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <SystemInit+0x5c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a0a      	ldr	r2, [pc, #40]	; (8003158 <SystemInit+0x5c>)
 800312e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003132:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003134:	4b08      	ldr	r3, [pc, #32]	; (8003158 <SystemInit+0x5c>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	4a07      	ldr	r2, [pc, #28]	; (8003158 <SystemInit+0x5c>)
 800313a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800313e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003140:	4b05      	ldr	r3, [pc, #20]	; (8003158 <SystemInit+0x5c>)
 8003142:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003146:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003148:	4b05      	ldr	r3, [pc, #20]	; (8003160 <SystemInit+0x64>)
 800314a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800314e:	609a      	str	r2, [r3, #8]
#endif 
}
 8003150:	bf00      	nop
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr
 8003158:	40021000 	.word	0x40021000
 800315c:	f8ff0000 	.word	0xf8ff0000
 8003160:	e000ed00 	.word	0xe000ed00

08003164 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003164:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003166:	e003      	b.n	8003170 <LoopCopyDataInit>

08003168 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003168:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800316a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800316c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800316e:	3104      	adds	r1, #4

08003170 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003170:	480a      	ldr	r0, [pc, #40]	; (800319c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003172:	4b0b      	ldr	r3, [pc, #44]	; (80031a0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003174:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003176:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003178:	d3f6      	bcc.n	8003168 <CopyDataInit>
  ldr r2, =_sbss
 800317a:	4a0a      	ldr	r2, [pc, #40]	; (80031a4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800317c:	e002      	b.n	8003184 <LoopFillZerobss>

0800317e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800317e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003180:	f842 3b04 	str.w	r3, [r2], #4

08003184 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003184:	4b08      	ldr	r3, [pc, #32]	; (80031a8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003186:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003188:	d3f9      	bcc.n	800317e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800318a:	f7ff ffb7 	bl	80030fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800318e:	f000 f80f 	bl	80031b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003192:	f7ff fc19 	bl	80029c8 <main>
  bx lr
 8003196:	4770      	bx	lr
  ldr r3, =_sidata
 8003198:	08003268 	.word	0x08003268
  ldr r0, =_sdata
 800319c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80031a0:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 80031a4:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 80031a8:	2000016c 	.word	0x2000016c

080031ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031ac:	e7fe      	b.n	80031ac <ADC1_2_IRQHandler>
	...

080031b0 <__libc_init_array>:
 80031b0:	b570      	push	{r4, r5, r6, lr}
 80031b2:	2500      	movs	r5, #0
 80031b4:	4e0c      	ldr	r6, [pc, #48]	; (80031e8 <__libc_init_array+0x38>)
 80031b6:	4c0d      	ldr	r4, [pc, #52]	; (80031ec <__libc_init_array+0x3c>)
 80031b8:	1ba4      	subs	r4, r4, r6
 80031ba:	10a4      	asrs	r4, r4, #2
 80031bc:	42a5      	cmp	r5, r4
 80031be:	d109      	bne.n	80031d4 <__libc_init_array+0x24>
 80031c0:	f000 f822 	bl	8003208 <_init>
 80031c4:	2500      	movs	r5, #0
 80031c6:	4e0a      	ldr	r6, [pc, #40]	; (80031f0 <__libc_init_array+0x40>)
 80031c8:	4c0a      	ldr	r4, [pc, #40]	; (80031f4 <__libc_init_array+0x44>)
 80031ca:	1ba4      	subs	r4, r4, r6
 80031cc:	10a4      	asrs	r4, r4, #2
 80031ce:	42a5      	cmp	r5, r4
 80031d0:	d105      	bne.n	80031de <__libc_init_array+0x2e>
 80031d2:	bd70      	pop	{r4, r5, r6, pc}
 80031d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031d8:	4798      	blx	r3
 80031da:	3501      	adds	r5, #1
 80031dc:	e7ee      	b.n	80031bc <__libc_init_array+0xc>
 80031de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031e2:	4798      	blx	r3
 80031e4:	3501      	adds	r5, #1
 80031e6:	e7f2      	b.n	80031ce <__libc_init_array+0x1e>
 80031e8:	08003260 	.word	0x08003260
 80031ec:	08003260 	.word	0x08003260
 80031f0:	08003260 	.word	0x08003260
 80031f4:	08003264 	.word	0x08003264

080031f8 <memset>:
 80031f8:	4603      	mov	r3, r0
 80031fa:	4402      	add	r2, r0
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d100      	bne.n	8003202 <memset+0xa>
 8003200:	4770      	bx	lr
 8003202:	f803 1b01 	strb.w	r1, [r3], #1
 8003206:	e7f9      	b.n	80031fc <memset+0x4>

08003208 <_init>:
 8003208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800320a:	bf00      	nop
 800320c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800320e:	bc08      	pop	{r3}
 8003210:	469e      	mov	lr, r3
 8003212:	4770      	bx	lr

08003214 <_fini>:
 8003214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003216:	bf00      	nop
 8003218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800321a:	bc08      	pop	{r3}
 800321c:	469e      	mov	lr, r3
 800321e:	4770      	bx	lr
